
nios_accel_3d.elf:     file format elf32-littlenios2
nios_accel_3d.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000e8c memsz 0x00000e8c flags r-x
    LOAD off    0x00001eac vaddr 0x00010eac paddr 0x00011034 align 2**12
         filesz 0x00000188 memsz 0x00000188 flags rw-
    LOAD off    0x000021bc vaddr 0x000111bc paddr 0x000111bc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00002034  2**0
                  CONTENTS
  2 .text         00000e50  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00010e70  00010e70  00001e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000188  00010eac  00011034  00001eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000111bc  000111bc  000021bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000111cc  000111cc  00002034  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000328  00000000  00000000  00002058  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004977  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000180e  00000000  00000000  00006cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001be9  00000000  00000000  00008505  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000048c  00000000  00000000  0000a0f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000130e  00000000  00000000  0000a57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000014f2  00000000  00000000  0000b88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000cd7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0000cd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000e36a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000e36d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000e370  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000e371  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000e372  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000e37b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000e384  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0000e38d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000015  00000000  00000000  0000e39f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004ff9  00000000  00000000  0000e3b4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e15d  00000000  00000000  000133ad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010e70 l    d  .rodata	00000000 .rodata
00010eac l    d  .rwdata	00000000 .rwdata
000111bc l    d  .bss	00000000 .bss
000111cc l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/dev/nios_accel_3d_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 nios_read_accel.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001015c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010eac l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010f8c l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010d4c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00010af8 g     F .text	0000002c alt_main
00011034 g       *ABS*	00000000 __flash_rwdata_start
00010110 g     F .text	0000004c printf
00011018 g     O .rwdata	00000004 jtag_uart
00010e38 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010c40 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000111bc g     O .bss	00000004 errno
000111c4 g     O .bss	00000004 alt_argv
00019010 g       *ABS*	00000000 _gp
00010fb8 g     O .rwdata	00000030 alt_fd_list
00010dc0 g     F .text	00000074 alt_find_dev
000100d4 g     F .text	0000003c _printf_r
00010934 g     F .text	00000064 .hidden __udivsi3
0001101c g     O .rwdata	00000004 alt_max_fd
00011010 g     O .rwdata	00000004 _global_impure_ptr
000111cc g       *ABS*	00000000 __bss_end
00010fe8 g     O .rwdata	00000028 alt_dev_null
00010d48 g     F .text	00000004 alt_dcache_flush_all
00011034 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011020 g     O .rwdata	00000008 alt_dev_list
00010b24 g     F .text	00000060 write
00010eac g       *ABS*	00000000 __ram_rodata_end
00010998 g     F .text	00000058 .hidden __umodsi3
000111cc g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010bb4 g     F .text	00000034 altera_avalon_jtag_uart_write
000101c8 g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00010ba4 g     F .text	00000010 alt_sys_init
00010bf0 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
000109f0 g     F .text	00000028 .hidden __mulsi3
00010eac g       *ABS*	00000000 __ram_rwdata_start
00010e70 g       *ABS*	00000000 __ram_rodata_start
00010c98 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00010e40 g     F .text	00000030 memcmp
000111cc g       *ABS*	00000000 __alt_stack_base
00010d54 g     F .text	0000006c alt_dev_llist_insert
00010710 g     F .text	000000b8 __sfvwrite_small_dev
000111bc g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000078 main
000111c0 g     O .bss	00000004 alt_envp
00011030 g     O .rwdata	00000004 alt_errno
0001083c g     F .text	00000084 .hidden __divsi3
00010e70 g       *ABS*	00000000 __flash_rodata_start
00010b84 g     F .text	00000020 alt_irq_init
000107e4 g     F .text	00000058 _write_r
00011014 g     O .rwdata	00000004 _impure_ptr
000111c8 g     O .bss	00000004 alt_argc
00011028 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010be8 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011034 g       *ABS*	00000000 _edata
000111cc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000108c0 g     F .text	00000074 .hidden __modsi3
00010cf0 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010c04 g     F .text	00000020 alt_up_accelerometer_spi_read
00010c24 g     F .text	0000001c alt_up_accelerometer_spi_write
000107c8 g     F .text	0000001c strlen
00010e34 g     F .text	00000004 alt_icache_flush_all
000106f4 g     F .text	0000001c __vfprintf_internal
00010a18 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a40414 	ori	gp,gp,36880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10846f14 	ori	r2,r2,4540

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c47314 	ori	r3,r3,4556

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010a180 	call	10a18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010af80 	call	10af8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <main>:

int main() {

    // Instantiate accelerometer object for taking readings
    alt_up_accelerometer_spi_dev *acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1005c:	01000074 	movhi	r4,1
#include "alt_types.h"

#include <stdio.h>


int main() {
   10060:	defffa04 	addi	sp,sp,-24

    // Instantiate accelerometer object for taking readings
    alt_up_accelerometer_spi_dev *acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10064:	21039c04 	addi	r4,r4,3696
#include "alt_types.h"

#include <stdio.h>


int main() {
   10068:	dc000315 	stw	r16,12(sp)
   1006c:	dfc00515 	stw	ra,20(sp)
   10070:	dc400415 	stw	r17,16(sp)

    // Instantiate accelerometer object for taking readings
    alt_up_accelerometer_spi_dev *acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10074:	0010be80 	call	10be8 <alt_up_accelerometer_spi_open_dev>
   10078:	1021883a 	mov	r16,r2
    // char *z1 = &accel_readings[2] + 1;

    // Take readings and print result on UART
    while (1) {
        alt_32 x_read, y_read, z_read;
        alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   1007c:	d9400204 	addi	r5,sp,8
   10080:	8009883a 	mov	r4,r16
   10084:	0010c400 	call	10c40 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, &y_read);
   10088:	d9400104 	addi	r5,sp,4
   1008c:	8009883a 	mov	r4,r16
   10090:	0010c980 	call	10c98 <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, &z_read);
   10094:	d80b883a 	mov	r5,sp
   10098:	8009883a 	mov	r4,r16
   1009c:	0010cf00 	call	10cf0 <alt_up_accelerometer_spi_read_z_axis>

        printf("X: %i, Y: %i, Z: %ie", x_read, y_read, z_read);
   100a0:	d9c00017 	ldw	r7,0(sp)
   100a4:	d9800117 	ldw	r6,4(sp)
   100a8:	d9400217 	ldw	r5,8(sp)
   100ac:	01000074 	movhi	r4,1
   100b0:	2103a204 	addi	r4,r4,3720
   100b4:	00101100 	call	10110 <printf>
   100b8:	0440fa04 	movi	r17,1000
        // Magic constant to slow transmission down for now
        // Custom PC implementation unable to keep up with max data
        // transfer rate (working on fix)
        for (int i = 0; i < 1000; i++) {
            // Waste some time!
            alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   100bc:	d9400204 	addi	r5,sp,8
   100c0:	8009883a 	mov	r4,r16
   100c4:	8c7fffc4 	addi	r17,r17,-1
   100c8:	0010c400 	call	10c40 <alt_up_accelerometer_spi_read_x_axis>
        printf("X: %i, Y: %i, Z: %ie", x_read, y_read, z_read);

        // Magic constant to slow transmission down for now
        // Custom PC implementation unable to keep up with max data
        // transfer rate (working on fix)
        for (int i = 0; i < 1000; i++) {
   100cc:	883ffb1e 	bne	r17,zero,100bc <__alt_data_end+0xffff00bc>
   100d0:	003fea06 	br	1007c <__alt_data_end+0xffff007c>

000100d4 <_printf_r>:
   100d4:	defffd04 	addi	sp,sp,-12
   100d8:	dfc00015 	stw	ra,0(sp)
   100dc:	d9800115 	stw	r6,4(sp)
   100e0:	d9c00215 	stw	r7,8(sp)
   100e4:	20c00217 	ldw	r3,8(r4)
   100e8:	01800074 	movhi	r6,1
   100ec:	3181c404 	addi	r6,r6,1808
   100f0:	19800115 	stw	r6,4(r3)
   100f4:	280d883a 	mov	r6,r5
   100f8:	21400217 	ldw	r5,8(r4)
   100fc:	d9c00104 	addi	r7,sp,4
   10100:	00101c80 	call	101c8 <___vfprintf_internal_r>
   10104:	dfc00017 	ldw	ra,0(sp)
   10108:	dec00304 	addi	sp,sp,12
   1010c:	f800283a 	ret

00010110 <printf>:
   10110:	defffc04 	addi	sp,sp,-16
   10114:	dfc00015 	stw	ra,0(sp)
   10118:	d9400115 	stw	r5,4(sp)
   1011c:	d9800215 	stw	r6,8(sp)
   10120:	d9c00315 	stw	r7,12(sp)
   10124:	00800074 	movhi	r2,1
   10128:	10840504 	addi	r2,r2,4116
   1012c:	10800017 	ldw	r2,0(r2)
   10130:	01400074 	movhi	r5,1
   10134:	2941c404 	addi	r5,r5,1808
   10138:	10c00217 	ldw	r3,8(r2)
   1013c:	d9800104 	addi	r6,sp,4
   10140:	19400115 	stw	r5,4(r3)
   10144:	200b883a 	mov	r5,r4
   10148:	11000217 	ldw	r4,8(r2)
   1014c:	00106f40 	call	106f4 <__vfprintf_internal>
   10150:	dfc00017 	ldw	ra,0(sp)
   10154:	dec00404 	addi	sp,sp,16
   10158:	f800283a 	ret

0001015c <print_repeat>:
   1015c:	defffb04 	addi	sp,sp,-20
   10160:	dc800315 	stw	r18,12(sp)
   10164:	dc400215 	stw	r17,8(sp)
   10168:	dc000115 	stw	r16,4(sp)
   1016c:	dfc00415 	stw	ra,16(sp)
   10170:	2025883a 	mov	r18,r4
   10174:	2823883a 	mov	r17,r5
   10178:	d9800005 	stb	r6,0(sp)
   1017c:	3821883a 	mov	r16,r7
   10180:	04000a0e 	bge	zero,r16,101ac <print_repeat+0x50>
   10184:	88800117 	ldw	r2,4(r17)
   10188:	01c00044 	movi	r7,1
   1018c:	d80d883a 	mov	r6,sp
   10190:	880b883a 	mov	r5,r17
   10194:	9009883a 	mov	r4,r18
   10198:	103ee83a 	callr	r2
   1019c:	843fffc4 	addi	r16,r16,-1
   101a0:	103ff726 	beq	r2,zero,10180 <__alt_data_end+0xffff0180>
   101a4:	00bfffc4 	movi	r2,-1
   101a8:	00000106 	br	101b0 <print_repeat+0x54>
   101ac:	0005883a 	mov	r2,zero
   101b0:	dfc00417 	ldw	ra,16(sp)
   101b4:	dc800317 	ldw	r18,12(sp)
   101b8:	dc400217 	ldw	r17,8(sp)
   101bc:	dc000117 	ldw	r16,4(sp)
   101c0:	dec00504 	addi	sp,sp,20
   101c4:	f800283a 	ret

000101c8 <___vfprintf_internal_r>:
   101c8:	deffe504 	addi	sp,sp,-108
   101cc:	d8c00804 	addi	r3,sp,32
   101d0:	ddc01815 	stw	r23,96(sp)
   101d4:	dd801715 	stw	r22,92(sp)
   101d8:	dd401615 	stw	r21,88(sp)
   101dc:	dd001515 	stw	r20,84(sp)
   101e0:	dcc01415 	stw	r19,80(sp)
   101e4:	dc801315 	stw	r18,76(sp)
   101e8:	dc401215 	stw	r17,72(sp)
   101ec:	dc001115 	stw	r16,68(sp)
   101f0:	dfc01a15 	stw	ra,104(sp)
   101f4:	df001915 	stw	fp,100(sp)
   101f8:	2029883a 	mov	r20,r4
   101fc:	2823883a 	mov	r17,r5
   10200:	382d883a 	mov	r22,r7
   10204:	d9800f15 	stw	r6,60(sp)
   10208:	0021883a 	mov	r16,zero
   1020c:	d8000e15 	stw	zero,56(sp)
   10210:	d8000a15 	stw	zero,40(sp)
   10214:	002b883a 	mov	r21,zero
   10218:	0027883a 	mov	r19,zero
   1021c:	0025883a 	mov	r18,zero
   10220:	d8000c15 	stw	zero,48(sp)
   10224:	d8000b15 	stw	zero,44(sp)
   10228:	002f883a 	mov	r23,zero
   1022c:	d8c00915 	stw	r3,36(sp)
   10230:	d8c00f17 	ldw	r3,60(sp)
   10234:	19000003 	ldbu	r4,0(r3)
   10238:	20803fcc 	andi	r2,r4,255
   1023c:	1080201c 	xori	r2,r2,128
   10240:	10bfe004 	addi	r2,r2,-128
   10244:	10011e26 	beq	r2,zero,106c0 <___vfprintf_internal_r+0x4f8>
   10248:	00c00044 	movi	r3,1
   1024c:	b8c01426 	beq	r23,r3,102a0 <___vfprintf_internal_r+0xd8>
   10250:	1dc00216 	blt	r3,r23,1025c <___vfprintf_internal_r+0x94>
   10254:	b8000626 	beq	r23,zero,10270 <___vfprintf_internal_r+0xa8>
   10258:	00011506 	br	106b0 <___vfprintf_internal_r+0x4e8>
   1025c:	01400084 	movi	r5,2
   10260:	b9401d26 	beq	r23,r5,102d8 <___vfprintf_internal_r+0x110>
   10264:	014000c4 	movi	r5,3
   10268:	b9402b26 	beq	r23,r5,10318 <___vfprintf_internal_r+0x150>
   1026c:	00011006 	br	106b0 <___vfprintf_internal_r+0x4e8>
   10270:	01400944 	movi	r5,37
   10274:	1140fc26 	beq	r2,r5,10668 <___vfprintf_internal_r+0x4a0>
   10278:	88800117 	ldw	r2,4(r17)
   1027c:	d9000005 	stb	r4,0(sp)
   10280:	01c00044 	movi	r7,1
   10284:	d80d883a 	mov	r6,sp
   10288:	880b883a 	mov	r5,r17
   1028c:	a009883a 	mov	r4,r20
   10290:	103ee83a 	callr	r2
   10294:	1000d81e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   10298:	84000044 	addi	r16,r16,1
   1029c:	00010406 	br	106b0 <___vfprintf_internal_r+0x4e8>
   102a0:	01400c04 	movi	r5,48
   102a4:	1140fa26 	beq	r2,r5,10690 <___vfprintf_internal_r+0x4c8>
   102a8:	01400944 	movi	r5,37
   102ac:	11400a1e 	bne	r2,r5,102d8 <___vfprintf_internal_r+0x110>
   102b0:	d8800005 	stb	r2,0(sp)
   102b4:	88800117 	ldw	r2,4(r17)
   102b8:	b80f883a 	mov	r7,r23
   102bc:	d80d883a 	mov	r6,sp
   102c0:	880b883a 	mov	r5,r17
   102c4:	a009883a 	mov	r4,r20
   102c8:	103ee83a 	callr	r2
   102cc:	1000ca1e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   102d0:	84000044 	addi	r16,r16,1
   102d4:	0000f506 	br	106ac <___vfprintf_internal_r+0x4e4>
   102d8:	25fff404 	addi	r23,r4,-48
   102dc:	bdc03fcc 	andi	r23,r23,255
   102e0:	00c00244 	movi	r3,9
   102e4:	1dc00936 	bltu	r3,r23,1030c <___vfprintf_internal_r+0x144>
   102e8:	00bfffc4 	movi	r2,-1
   102ec:	90800426 	beq	r18,r2,10300 <___vfprintf_internal_r+0x138>
   102f0:	01400284 	movi	r5,10
   102f4:	9009883a 	mov	r4,r18
   102f8:	00109f00 	call	109f0 <__mulsi3>
   102fc:	00000106 	br	10304 <___vfprintf_internal_r+0x13c>
   10300:	0005883a 	mov	r2,zero
   10304:	b8a5883a 	add	r18,r23,r2
   10308:	0000e206 	br	10694 <___vfprintf_internal_r+0x4cc>
   1030c:	01400b84 	movi	r5,46
   10310:	1140e426 	beq	r2,r5,106a4 <___vfprintf_internal_r+0x4dc>
   10314:	05c00084 	movi	r23,2
   10318:	213ff404 	addi	r4,r4,-48
   1031c:	27003fcc 	andi	fp,r4,255
   10320:	00c00244 	movi	r3,9
   10324:	1f000936 	bltu	r3,fp,1034c <___vfprintf_internal_r+0x184>
   10328:	00bfffc4 	movi	r2,-1
   1032c:	98800426 	beq	r19,r2,10340 <___vfprintf_internal_r+0x178>
   10330:	01400284 	movi	r5,10
   10334:	9809883a 	mov	r4,r19
   10338:	00109f00 	call	109f0 <__mulsi3>
   1033c:	00000106 	br	10344 <___vfprintf_internal_r+0x17c>
   10340:	0005883a 	mov	r2,zero
   10344:	e0a7883a 	add	r19,fp,r2
   10348:	0000d906 	br	106b0 <___vfprintf_internal_r+0x4e8>
   1034c:	00c01b04 	movi	r3,108
   10350:	10c0d226 	beq	r2,r3,1069c <___vfprintf_internal_r+0x4d4>
   10354:	013fffc4 	movi	r4,-1
   10358:	99000226 	beq	r19,r4,10364 <___vfprintf_internal_r+0x19c>
   1035c:	d8000b15 	stw	zero,44(sp)
   10360:	00000106 	br	10368 <___vfprintf_internal_r+0x1a0>
   10364:	04c00044 	movi	r19,1
   10368:	01001a44 	movi	r4,105
   1036c:	11001626 	beq	r2,r4,103c8 <___vfprintf_internal_r+0x200>
   10370:	20800916 	blt	r4,r2,10398 <___vfprintf_internal_r+0x1d0>
   10374:	010018c4 	movi	r4,99
   10378:	11008826 	beq	r2,r4,1059c <___vfprintf_internal_r+0x3d4>
   1037c:	01001904 	movi	r4,100
   10380:	11001126 	beq	r2,r4,103c8 <___vfprintf_internal_r+0x200>
   10384:	01001604 	movi	r4,88
   10388:	1100c81e 	bne	r2,r4,106ac <___vfprintf_internal_r+0x4e4>
   1038c:	00c00044 	movi	r3,1
   10390:	d8c00e15 	stw	r3,56(sp)
   10394:	00001506 	br	103ec <___vfprintf_internal_r+0x224>
   10398:	01001cc4 	movi	r4,115
   1039c:	11009826 	beq	r2,r4,10600 <___vfprintf_internal_r+0x438>
   103a0:	20800416 	blt	r4,r2,103b4 <___vfprintf_internal_r+0x1ec>
   103a4:	01001bc4 	movi	r4,111
   103a8:	1100c01e 	bne	r2,r4,106ac <___vfprintf_internal_r+0x4e4>
   103ac:	05400204 	movi	r21,8
   103b0:	00000f06 	br	103f0 <___vfprintf_internal_r+0x228>
   103b4:	01001d44 	movi	r4,117
   103b8:	11000d26 	beq	r2,r4,103f0 <___vfprintf_internal_r+0x228>
   103bc:	01001e04 	movi	r4,120
   103c0:	11000a26 	beq	r2,r4,103ec <___vfprintf_internal_r+0x224>
   103c4:	0000b906 	br	106ac <___vfprintf_internal_r+0x4e4>
   103c8:	d8c00a17 	ldw	r3,40(sp)
   103cc:	b7000104 	addi	fp,r22,4
   103d0:	18000726 	beq	r3,zero,103f0 <___vfprintf_internal_r+0x228>
   103d4:	df000d15 	stw	fp,52(sp)
   103d8:	b5c00017 	ldw	r23,0(r22)
   103dc:	b800080e 	bge	r23,zero,10400 <___vfprintf_internal_r+0x238>
   103e0:	05efc83a 	sub	r23,zero,r23
   103e4:	02400044 	movi	r9,1
   103e8:	00000606 	br	10404 <___vfprintf_internal_r+0x23c>
   103ec:	05400404 	movi	r21,16
   103f0:	b0c00104 	addi	r3,r22,4
   103f4:	d8c00d15 	stw	r3,52(sp)
   103f8:	b5c00017 	ldw	r23,0(r22)
   103fc:	d8000a15 	stw	zero,40(sp)
   10400:	0013883a 	mov	r9,zero
   10404:	d839883a 	mov	fp,sp
   10408:	b8001726 	beq	r23,zero,10468 <___vfprintf_internal_r+0x2a0>
   1040c:	a80b883a 	mov	r5,r21
   10410:	b809883a 	mov	r4,r23
   10414:	da401015 	stw	r9,64(sp)
   10418:	00109340 	call	10934 <__udivsi3>
   1041c:	a80b883a 	mov	r5,r21
   10420:	1009883a 	mov	r4,r2
   10424:	102d883a 	mov	r22,r2
   10428:	00109f00 	call	109f0 <__mulsi3>
   1042c:	b885c83a 	sub	r2,r23,r2
   10430:	00c00244 	movi	r3,9
   10434:	da401017 	ldw	r9,64(sp)
   10438:	18800216 	blt	r3,r2,10444 <___vfprintf_internal_r+0x27c>
   1043c:	10800c04 	addi	r2,r2,48
   10440:	00000506 	br	10458 <___vfprintf_internal_r+0x290>
   10444:	d8c00e17 	ldw	r3,56(sp)
   10448:	18000226 	beq	r3,zero,10454 <___vfprintf_internal_r+0x28c>
   1044c:	10800dc4 	addi	r2,r2,55
   10450:	00000106 	br	10458 <___vfprintf_internal_r+0x290>
   10454:	108015c4 	addi	r2,r2,87
   10458:	e0800005 	stb	r2,0(fp)
   1045c:	b02f883a 	mov	r23,r22
   10460:	e7000044 	addi	fp,fp,1
   10464:	003fe806 	br	10408 <__alt_data_end+0xffff0408>
   10468:	e6efc83a 	sub	r23,fp,sp
   1046c:	9dc5c83a 	sub	r2,r19,r23
   10470:	0080090e 	bge	zero,r2,10498 <___vfprintf_internal_r+0x2d0>
   10474:	e085883a 	add	r2,fp,r2
   10478:	01400c04 	movi	r5,48
   1047c:	d8c00917 	ldw	r3,36(sp)
   10480:	e009883a 	mov	r4,fp
   10484:	e0c0032e 	bgeu	fp,r3,10494 <___vfprintf_internal_r+0x2cc>
   10488:	e7000044 	addi	fp,fp,1
   1048c:	21400005 	stb	r5,0(r4)
   10490:	e0bffa1e 	bne	fp,r2,1047c <__alt_data_end+0xffff047c>
   10494:	e6efc83a 	sub	r23,fp,sp
   10498:	d8c00b17 	ldw	r3,44(sp)
   1049c:	4dd1883a 	add	r8,r9,r23
   104a0:	922dc83a 	sub	r22,r18,r8
   104a4:	18001626 	beq	r3,zero,10500 <___vfprintf_internal_r+0x338>
   104a8:	48000a26 	beq	r9,zero,104d4 <___vfprintf_internal_r+0x30c>
   104ac:	00800b44 	movi	r2,45
   104b0:	d8800805 	stb	r2,32(sp)
   104b4:	88800117 	ldw	r2,4(r17)
   104b8:	01c00044 	movi	r7,1
   104bc:	d9800804 	addi	r6,sp,32
   104c0:	880b883a 	mov	r5,r17
   104c4:	a009883a 	mov	r4,r20
   104c8:	103ee83a 	callr	r2
   104cc:	10004a1e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   104d0:	84000044 	addi	r16,r16,1
   104d4:	0580070e 	bge	zero,r22,104f4 <___vfprintf_internal_r+0x32c>
   104d8:	b00f883a 	mov	r7,r22
   104dc:	01800c04 	movi	r6,48
   104e0:	880b883a 	mov	r5,r17
   104e4:	a009883a 	mov	r4,r20
   104e8:	001015c0 	call	1015c <print_repeat>
   104ec:	1000421e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   104f0:	85a1883a 	add	r16,r16,r22
   104f4:	e02d883a 	mov	r22,fp
   104f8:	bf2fc83a 	sub	r23,r23,fp
   104fc:	00002006 	br	10580 <___vfprintf_internal_r+0x3b8>
   10500:	0580090e 	bge	zero,r22,10528 <___vfprintf_internal_r+0x360>
   10504:	b00f883a 	mov	r7,r22
   10508:	01800804 	movi	r6,32
   1050c:	880b883a 	mov	r5,r17
   10510:	a009883a 	mov	r4,r20
   10514:	da401015 	stw	r9,64(sp)
   10518:	001015c0 	call	1015c <print_repeat>
   1051c:	da401017 	ldw	r9,64(sp)
   10520:	1000351e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   10524:	85a1883a 	add	r16,r16,r22
   10528:	483ff226 	beq	r9,zero,104f4 <__alt_data_end+0xffff04f4>
   1052c:	00800b44 	movi	r2,45
   10530:	d8800805 	stb	r2,32(sp)
   10534:	88800117 	ldw	r2,4(r17)
   10538:	01c00044 	movi	r7,1
   1053c:	d9800804 	addi	r6,sp,32
   10540:	880b883a 	mov	r5,r17
   10544:	a009883a 	mov	r4,r20
   10548:	103ee83a 	callr	r2
   1054c:	10002a1e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   10550:	84000044 	addi	r16,r16,1
   10554:	003fe706 	br	104f4 <__alt_data_end+0xffff04f4>
   10558:	b5bfffc4 	addi	r22,r22,-1
   1055c:	b0800003 	ldbu	r2,0(r22)
   10560:	01c00044 	movi	r7,1
   10564:	d9800804 	addi	r6,sp,32
   10568:	d8800805 	stb	r2,32(sp)
   1056c:	88800117 	ldw	r2,4(r17)
   10570:	880b883a 	mov	r5,r17
   10574:	a009883a 	mov	r4,r20
   10578:	103ee83a 	callr	r2
   1057c:	10001e1e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   10580:	8585c83a 	sub	r2,r16,r22
   10584:	b5c9883a 	add	r4,r22,r23
   10588:	e085883a 	add	r2,fp,r2
   1058c:	013ff216 	blt	zero,r4,10558 <__alt_data_end+0xffff0558>
   10590:	1021883a 	mov	r16,r2
   10594:	dd800d17 	ldw	r22,52(sp)
   10598:	00004406 	br	106ac <___vfprintf_internal_r+0x4e4>
   1059c:	00800044 	movi	r2,1
   105a0:	1480080e 	bge	r2,r18,105c4 <___vfprintf_internal_r+0x3fc>
   105a4:	95ffffc4 	addi	r23,r18,-1
   105a8:	b80f883a 	mov	r7,r23
   105ac:	01800804 	movi	r6,32
   105b0:	880b883a 	mov	r5,r17
   105b4:	a009883a 	mov	r4,r20
   105b8:	001015c0 	call	1015c <print_repeat>
   105bc:	10000e1e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   105c0:	85e1883a 	add	r16,r16,r23
   105c4:	b0800017 	ldw	r2,0(r22)
   105c8:	01c00044 	movi	r7,1
   105cc:	d80d883a 	mov	r6,sp
   105d0:	d8800005 	stb	r2,0(sp)
   105d4:	88800117 	ldw	r2,4(r17)
   105d8:	880b883a 	mov	r5,r17
   105dc:	a009883a 	mov	r4,r20
   105e0:	b5c00104 	addi	r23,r22,4
   105e4:	103ee83a 	callr	r2
   105e8:	1000031e 	bne	r2,zero,105f8 <___vfprintf_internal_r+0x430>
   105ec:	84000044 	addi	r16,r16,1
   105f0:	b82d883a 	mov	r22,r23
   105f4:	00002d06 	br	106ac <___vfprintf_internal_r+0x4e4>
   105f8:	00bfffc4 	movi	r2,-1
   105fc:	00003106 	br	106c4 <___vfprintf_internal_r+0x4fc>
   10600:	b5c00017 	ldw	r23,0(r22)
   10604:	b7000104 	addi	fp,r22,4
   10608:	b809883a 	mov	r4,r23
   1060c:	00107c80 	call	107c8 <strlen>
   10610:	9091c83a 	sub	r8,r18,r2
   10614:	102d883a 	mov	r22,r2
   10618:	0200090e 	bge	zero,r8,10640 <___vfprintf_internal_r+0x478>
   1061c:	400f883a 	mov	r7,r8
   10620:	01800804 	movi	r6,32
   10624:	880b883a 	mov	r5,r17
   10628:	a009883a 	mov	r4,r20
   1062c:	da001015 	stw	r8,64(sp)
   10630:	001015c0 	call	1015c <print_repeat>
   10634:	da001017 	ldw	r8,64(sp)
   10638:	103fef1e 	bne	r2,zero,105f8 <__alt_data_end+0xffff05f8>
   1063c:	8221883a 	add	r16,r16,r8
   10640:	88800117 	ldw	r2,4(r17)
   10644:	b00f883a 	mov	r7,r22
   10648:	b80d883a 	mov	r6,r23
   1064c:	880b883a 	mov	r5,r17
   10650:	a009883a 	mov	r4,r20
   10654:	103ee83a 	callr	r2
   10658:	103fe71e 	bne	r2,zero,105f8 <__alt_data_end+0xffff05f8>
   1065c:	85a1883a 	add	r16,r16,r22
   10660:	e02d883a 	mov	r22,fp
   10664:	00001106 	br	106ac <___vfprintf_internal_r+0x4e4>
   10668:	00c00044 	movi	r3,1
   1066c:	04ffffc4 	movi	r19,-1
   10670:	d8000e15 	stw	zero,56(sp)
   10674:	d8c00a15 	stw	r3,40(sp)
   10678:	05400284 	movi	r21,10
   1067c:	9825883a 	mov	r18,r19
   10680:	d8000c15 	stw	zero,48(sp)
   10684:	d8000b15 	stw	zero,44(sp)
   10688:	182f883a 	mov	r23,r3
   1068c:	00000806 	br	106b0 <___vfprintf_internal_r+0x4e8>
   10690:	ddc00b15 	stw	r23,44(sp)
   10694:	05c00084 	movi	r23,2
   10698:	00000506 	br	106b0 <___vfprintf_internal_r+0x4e8>
   1069c:	00c00044 	movi	r3,1
   106a0:	d8c00c15 	stw	r3,48(sp)
   106a4:	05c000c4 	movi	r23,3
   106a8:	00000106 	br	106b0 <___vfprintf_internal_r+0x4e8>
   106ac:	002f883a 	mov	r23,zero
   106b0:	d8c00f17 	ldw	r3,60(sp)
   106b4:	18c00044 	addi	r3,r3,1
   106b8:	d8c00f15 	stw	r3,60(sp)
   106bc:	003edc06 	br	10230 <__alt_data_end+0xffff0230>
   106c0:	8005883a 	mov	r2,r16
   106c4:	dfc01a17 	ldw	ra,104(sp)
   106c8:	df001917 	ldw	fp,100(sp)
   106cc:	ddc01817 	ldw	r23,96(sp)
   106d0:	dd801717 	ldw	r22,92(sp)
   106d4:	dd401617 	ldw	r21,88(sp)
   106d8:	dd001517 	ldw	r20,84(sp)
   106dc:	dcc01417 	ldw	r19,80(sp)
   106e0:	dc801317 	ldw	r18,76(sp)
   106e4:	dc401217 	ldw	r17,72(sp)
   106e8:	dc001117 	ldw	r16,68(sp)
   106ec:	dec01b04 	addi	sp,sp,108
   106f0:	f800283a 	ret

000106f4 <__vfprintf_internal>:
   106f4:	00800074 	movhi	r2,1
   106f8:	10840504 	addi	r2,r2,4116
   106fc:	300f883a 	mov	r7,r6
   10700:	280d883a 	mov	r6,r5
   10704:	200b883a 	mov	r5,r4
   10708:	11000017 	ldw	r4,0(r2)
   1070c:	00101c81 	jmpi	101c8 <___vfprintf_internal_r>

00010710 <__sfvwrite_small_dev>:
   10710:	2880000b 	ldhu	r2,0(r5)
   10714:	1080020c 	andi	r2,r2,8
   10718:	10002126 	beq	r2,zero,107a0 <__sfvwrite_small_dev+0x90>
   1071c:	2880008f 	ldh	r2,2(r5)
   10720:	defffa04 	addi	sp,sp,-24
   10724:	dc000015 	stw	r16,0(sp)
   10728:	dfc00515 	stw	ra,20(sp)
   1072c:	dd000415 	stw	r20,16(sp)
   10730:	dcc00315 	stw	r19,12(sp)
   10734:	dc800215 	stw	r18,8(sp)
   10738:	dc400115 	stw	r17,4(sp)
   1073c:	2821883a 	mov	r16,r5
   10740:	10001216 	blt	r2,zero,1078c <__sfvwrite_small_dev+0x7c>
   10744:	2027883a 	mov	r19,r4
   10748:	3025883a 	mov	r18,r6
   1074c:	3823883a 	mov	r17,r7
   10750:	05010004 	movi	r20,1024
   10754:	04400b0e 	bge	zero,r17,10784 <__sfvwrite_small_dev+0x74>
   10758:	880f883a 	mov	r7,r17
   1075c:	a440010e 	bge	r20,r17,10764 <__sfvwrite_small_dev+0x54>
   10760:	01c10004 	movi	r7,1024
   10764:	8140008f 	ldh	r5,2(r16)
   10768:	900d883a 	mov	r6,r18
   1076c:	9809883a 	mov	r4,r19
   10770:	00107e40 	call	107e4 <_write_r>
   10774:	0080050e 	bge	zero,r2,1078c <__sfvwrite_small_dev+0x7c>
   10778:	88a3c83a 	sub	r17,r17,r2
   1077c:	90a5883a 	add	r18,r18,r2
   10780:	003ff406 	br	10754 <__alt_data_end+0xffff0754>
   10784:	0005883a 	mov	r2,zero
   10788:	00000706 	br	107a8 <__sfvwrite_small_dev+0x98>
   1078c:	8080000b 	ldhu	r2,0(r16)
   10790:	10801014 	ori	r2,r2,64
   10794:	8080000d 	sth	r2,0(r16)
   10798:	00bfffc4 	movi	r2,-1
   1079c:	00000206 	br	107a8 <__sfvwrite_small_dev+0x98>
   107a0:	00bfffc4 	movi	r2,-1
   107a4:	f800283a 	ret
   107a8:	dfc00517 	ldw	ra,20(sp)
   107ac:	dd000417 	ldw	r20,16(sp)
   107b0:	dcc00317 	ldw	r19,12(sp)
   107b4:	dc800217 	ldw	r18,8(sp)
   107b8:	dc400117 	ldw	r17,4(sp)
   107bc:	dc000017 	ldw	r16,0(sp)
   107c0:	dec00604 	addi	sp,sp,24
   107c4:	f800283a 	ret

000107c8 <strlen>:
   107c8:	2005883a 	mov	r2,r4
   107cc:	10c00007 	ldb	r3,0(r2)
   107d0:	18000226 	beq	r3,zero,107dc <strlen+0x14>
   107d4:	10800044 	addi	r2,r2,1
   107d8:	003ffc06 	br	107cc <__alt_data_end+0xffff07cc>
   107dc:	1105c83a 	sub	r2,r2,r4
   107e0:	f800283a 	ret

000107e4 <_write_r>:
   107e4:	defffd04 	addi	sp,sp,-12
   107e8:	dc000015 	stw	r16,0(sp)
   107ec:	04000074 	movhi	r16,1
   107f0:	dc400115 	stw	r17,4(sp)
   107f4:	84046f04 	addi	r16,r16,4540
   107f8:	2023883a 	mov	r17,r4
   107fc:	2809883a 	mov	r4,r5
   10800:	300b883a 	mov	r5,r6
   10804:	380d883a 	mov	r6,r7
   10808:	dfc00215 	stw	ra,8(sp)
   1080c:	80000015 	stw	zero,0(r16)
   10810:	0010b240 	call	10b24 <write>
   10814:	00ffffc4 	movi	r3,-1
   10818:	10c0031e 	bne	r2,r3,10828 <_write_r+0x44>
   1081c:	80c00017 	ldw	r3,0(r16)
   10820:	18000126 	beq	r3,zero,10828 <_write_r+0x44>
   10824:	88c00015 	stw	r3,0(r17)
   10828:	dfc00217 	ldw	ra,8(sp)
   1082c:	dc400117 	ldw	r17,4(sp)
   10830:	dc000017 	ldw	r16,0(sp)
   10834:	dec00304 	addi	sp,sp,12
   10838:	f800283a 	ret

0001083c <__divsi3>:
   1083c:	20001b16 	blt	r4,zero,108ac <__divsi3+0x70>
   10840:	000f883a 	mov	r7,zero
   10844:	28001616 	blt	r5,zero,108a0 <__divsi3+0x64>
   10848:	200d883a 	mov	r6,r4
   1084c:	29001a2e 	bgeu	r5,r4,108b8 <__divsi3+0x7c>
   10850:	00800804 	movi	r2,32
   10854:	00c00044 	movi	r3,1
   10858:	00000106 	br	10860 <__divsi3+0x24>
   1085c:	10000d26 	beq	r2,zero,10894 <__divsi3+0x58>
   10860:	294b883a 	add	r5,r5,r5
   10864:	10bfffc4 	addi	r2,r2,-1
   10868:	18c7883a 	add	r3,r3,r3
   1086c:	293ffb36 	bltu	r5,r4,1085c <__alt_data_end+0xffff085c>
   10870:	0005883a 	mov	r2,zero
   10874:	18000726 	beq	r3,zero,10894 <__divsi3+0x58>
   10878:	0005883a 	mov	r2,zero
   1087c:	31400236 	bltu	r6,r5,10888 <__divsi3+0x4c>
   10880:	314dc83a 	sub	r6,r6,r5
   10884:	10c4b03a 	or	r2,r2,r3
   10888:	1806d07a 	srli	r3,r3,1
   1088c:	280ad07a 	srli	r5,r5,1
   10890:	183ffa1e 	bne	r3,zero,1087c <__alt_data_end+0xffff087c>
   10894:	38000126 	beq	r7,zero,1089c <__divsi3+0x60>
   10898:	0085c83a 	sub	r2,zero,r2
   1089c:	f800283a 	ret
   108a0:	014bc83a 	sub	r5,zero,r5
   108a4:	39c0005c 	xori	r7,r7,1
   108a8:	003fe706 	br	10848 <__alt_data_end+0xffff0848>
   108ac:	0109c83a 	sub	r4,zero,r4
   108b0:	01c00044 	movi	r7,1
   108b4:	003fe306 	br	10844 <__alt_data_end+0xffff0844>
   108b8:	00c00044 	movi	r3,1
   108bc:	003fee06 	br	10878 <__alt_data_end+0xffff0878>

000108c0 <__modsi3>:
   108c0:	20001716 	blt	r4,zero,10920 <__modsi3+0x60>
   108c4:	000f883a 	mov	r7,zero
   108c8:	2005883a 	mov	r2,r4
   108cc:	28001216 	blt	r5,zero,10918 <__modsi3+0x58>
   108d0:	2900162e 	bgeu	r5,r4,1092c <__modsi3+0x6c>
   108d4:	01800804 	movi	r6,32
   108d8:	00c00044 	movi	r3,1
   108dc:	00000106 	br	108e4 <__modsi3+0x24>
   108e0:	30000a26 	beq	r6,zero,1090c <__modsi3+0x4c>
   108e4:	294b883a 	add	r5,r5,r5
   108e8:	31bfffc4 	addi	r6,r6,-1
   108ec:	18c7883a 	add	r3,r3,r3
   108f0:	293ffb36 	bltu	r5,r4,108e0 <__alt_data_end+0xffff08e0>
   108f4:	18000526 	beq	r3,zero,1090c <__modsi3+0x4c>
   108f8:	1806d07a 	srli	r3,r3,1
   108fc:	11400136 	bltu	r2,r5,10904 <__modsi3+0x44>
   10900:	1145c83a 	sub	r2,r2,r5
   10904:	280ad07a 	srli	r5,r5,1
   10908:	183ffb1e 	bne	r3,zero,108f8 <__alt_data_end+0xffff08f8>
   1090c:	38000126 	beq	r7,zero,10914 <__modsi3+0x54>
   10910:	0085c83a 	sub	r2,zero,r2
   10914:	f800283a 	ret
   10918:	014bc83a 	sub	r5,zero,r5
   1091c:	003fec06 	br	108d0 <__alt_data_end+0xffff08d0>
   10920:	0109c83a 	sub	r4,zero,r4
   10924:	01c00044 	movi	r7,1
   10928:	003fe706 	br	108c8 <__alt_data_end+0xffff08c8>
   1092c:	00c00044 	movi	r3,1
   10930:	003ff106 	br	108f8 <__alt_data_end+0xffff08f8>

00010934 <__udivsi3>:
   10934:	200d883a 	mov	r6,r4
   10938:	2900152e 	bgeu	r5,r4,10990 <__udivsi3+0x5c>
   1093c:	28001416 	blt	r5,zero,10990 <__udivsi3+0x5c>
   10940:	00800804 	movi	r2,32
   10944:	00c00044 	movi	r3,1
   10948:	00000206 	br	10954 <__udivsi3+0x20>
   1094c:	10000e26 	beq	r2,zero,10988 <__udivsi3+0x54>
   10950:	28000516 	blt	r5,zero,10968 <__udivsi3+0x34>
   10954:	294b883a 	add	r5,r5,r5
   10958:	10bfffc4 	addi	r2,r2,-1
   1095c:	18c7883a 	add	r3,r3,r3
   10960:	293ffa36 	bltu	r5,r4,1094c <__alt_data_end+0xffff094c>
   10964:	18000826 	beq	r3,zero,10988 <__udivsi3+0x54>
   10968:	0005883a 	mov	r2,zero
   1096c:	31400236 	bltu	r6,r5,10978 <__udivsi3+0x44>
   10970:	314dc83a 	sub	r6,r6,r5
   10974:	10c4b03a 	or	r2,r2,r3
   10978:	1806d07a 	srli	r3,r3,1
   1097c:	280ad07a 	srli	r5,r5,1
   10980:	183ffa1e 	bne	r3,zero,1096c <__alt_data_end+0xffff096c>
   10984:	f800283a 	ret
   10988:	0005883a 	mov	r2,zero
   1098c:	f800283a 	ret
   10990:	00c00044 	movi	r3,1
   10994:	003ff406 	br	10968 <__alt_data_end+0xffff0968>

00010998 <__umodsi3>:
   10998:	2005883a 	mov	r2,r4
   1099c:	2900122e 	bgeu	r5,r4,109e8 <__umodsi3+0x50>
   109a0:	28001116 	blt	r5,zero,109e8 <__umodsi3+0x50>
   109a4:	01800804 	movi	r6,32
   109a8:	00c00044 	movi	r3,1
   109ac:	00000206 	br	109b8 <__umodsi3+0x20>
   109b0:	30000c26 	beq	r6,zero,109e4 <__umodsi3+0x4c>
   109b4:	28000516 	blt	r5,zero,109cc <__umodsi3+0x34>
   109b8:	294b883a 	add	r5,r5,r5
   109bc:	31bfffc4 	addi	r6,r6,-1
   109c0:	18c7883a 	add	r3,r3,r3
   109c4:	293ffa36 	bltu	r5,r4,109b0 <__alt_data_end+0xffff09b0>
   109c8:	18000626 	beq	r3,zero,109e4 <__umodsi3+0x4c>
   109cc:	1806d07a 	srli	r3,r3,1
   109d0:	11400136 	bltu	r2,r5,109d8 <__umodsi3+0x40>
   109d4:	1145c83a 	sub	r2,r2,r5
   109d8:	280ad07a 	srli	r5,r5,1
   109dc:	183ffb1e 	bne	r3,zero,109cc <__alt_data_end+0xffff09cc>
   109e0:	f800283a 	ret
   109e4:	f800283a 	ret
   109e8:	00c00044 	movi	r3,1
   109ec:	003ff706 	br	109cc <__alt_data_end+0xffff09cc>

000109f0 <__mulsi3>:
   109f0:	0005883a 	mov	r2,zero
   109f4:	20000726 	beq	r4,zero,10a14 <__mulsi3+0x24>
   109f8:	20c0004c 	andi	r3,r4,1
   109fc:	2008d07a 	srli	r4,r4,1
   10a00:	18000126 	beq	r3,zero,10a08 <__mulsi3+0x18>
   10a04:	1145883a 	add	r2,r2,r5
   10a08:	294b883a 	add	r5,r5,r5
   10a0c:	203ffa1e 	bne	r4,zero,109f8 <__alt_data_end+0xffff09f8>
   10a10:	f800283a 	ret
   10a14:	f800283a 	ret

00010a18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10a18:	deffff04 	addi	sp,sp,-4
   10a1c:	01000074 	movhi	r4,1
   10a20:	01400074 	movhi	r5,1
   10a24:	dfc00015 	stw	ra,0(sp)
   10a28:	2103ab04 	addi	r4,r4,3756
   10a2c:	29440d04 	addi	r5,r5,4148

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10a30:	2140061e 	bne	r4,r5,10a4c <alt_load+0x34>
   10a34:	01000074 	movhi	r4,1
   10a38:	01400074 	movhi	r5,1
   10a3c:	21000804 	addi	r4,r4,32
   10a40:	29400804 	addi	r5,r5,32
   10a44:	2140121e 	bne	r4,r5,10a90 <alt_load+0x78>
   10a48:	00000b06 	br	10a78 <alt_load+0x60>
   10a4c:	00c00074 	movhi	r3,1
   10a50:	18c40d04 	addi	r3,r3,4148
   10a54:	1907c83a 	sub	r3,r3,r4
   10a58:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10a5c:	10fff526 	beq	r2,r3,10a34 <__alt_data_end+0xffff0a34>
    {
      *to++ = *from++;
   10a60:	114f883a 	add	r7,r2,r5
   10a64:	39c00017 	ldw	r7,0(r7)
   10a68:	110d883a 	add	r6,r2,r4
   10a6c:	10800104 	addi	r2,r2,4
   10a70:	31c00015 	stw	r7,0(r6)
   10a74:	003ff906 	br	10a5c <__alt_data_end+0xffff0a5c>
   10a78:	01000074 	movhi	r4,1
   10a7c:	01400074 	movhi	r5,1
   10a80:	21039c04 	addi	r4,r4,3696
   10a84:	29439c04 	addi	r5,r5,3696

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10a88:	2140101e 	bne	r4,r5,10acc <alt_load+0xb4>
   10a8c:	00000b06 	br	10abc <alt_load+0xa4>
   10a90:	00c00074 	movhi	r3,1
   10a94:	18c00804 	addi	r3,r3,32
   10a98:	1907c83a 	sub	r3,r3,r4
   10a9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10aa0:	10fff526 	beq	r2,r3,10a78 <__alt_data_end+0xffff0a78>
    {
      *to++ = *from++;
   10aa4:	114f883a 	add	r7,r2,r5
   10aa8:	39c00017 	ldw	r7,0(r7)
   10aac:	110d883a 	add	r6,r2,r4
   10ab0:	10800104 	addi	r2,r2,4
   10ab4:	31c00015 	stw	r7,0(r6)
   10ab8:	003ff906 	br	10aa0 <__alt_data_end+0xffff0aa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10abc:	0010d480 	call	10d48 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10ac0:	dfc00017 	ldw	ra,0(sp)
   10ac4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10ac8:	0010e341 	jmpi	10e34 <alt_icache_flush_all>
   10acc:	00c00074 	movhi	r3,1
   10ad0:	18c3ab04 	addi	r3,r3,3756
   10ad4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10ad8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10adc:	18bff726 	beq	r3,r2,10abc <__alt_data_end+0xffff0abc>
    {
      *to++ = *from++;
   10ae0:	114f883a 	add	r7,r2,r5
   10ae4:	39c00017 	ldw	r7,0(r7)
   10ae8:	110d883a 	add	r6,r2,r4
   10aec:	10800104 	addi	r2,r2,4
   10af0:	31c00015 	stw	r7,0(r6)
   10af4:	003ff906 	br	10adc <__alt_data_end+0xffff0adc>

00010af8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10af8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10afc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10b00:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10b04:	0010b840 	call	10b84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10b08:	0010ba40 	call	10ba4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10b0c:	d1a06c17 	ldw	r6,-32336(gp)
   10b10:	d1606d17 	ldw	r5,-32332(gp)
   10b14:	d1206e17 	ldw	r4,-32328(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10b18:	dfc00017 	ldw	ra,0(sp)
   10b1c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10b20:	001005c1 	jmpi	1005c <main>

00010b24 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10b24:	00800044 	movi	r2,1
   10b28:	20800226 	beq	r4,r2,10b34 <write+0x10>
   10b2c:	00800084 	movi	r2,2
   10b30:	2080041e 	bne	r4,r2,10b44 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10b34:	01000074 	movhi	r4,1
   10b38:	000f883a 	mov	r7,zero
   10b3c:	21040604 	addi	r4,r4,4120
   10b40:	0010bb41 	jmpi	10bb4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10b44:	d0a00817 	ldw	r2,-32736(gp)
   10b48:	10000926 	beq	r2,zero,10b70 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10b4c:	deffff04 	addi	sp,sp,-4
   10b50:	dfc00015 	stw	ra,0(sp)
   10b54:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10b58:	00c01444 	movi	r3,81
   10b5c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10b60:	00bfffc4 	movi	r2,-1
   10b64:	dfc00017 	ldw	ra,0(sp)
   10b68:	dec00104 	addi	sp,sp,4
   10b6c:	f800283a 	ret
   10b70:	d0a06b04 	addi	r2,gp,-32340
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10b74:	00c01444 	movi	r3,81
   10b78:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10b7c:	00bfffc4 	movi	r2,-1
   10b80:	f800283a 	ret

00010b84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10b84:	deffff04 	addi	sp,sp,-4
   10b88:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10b8c:	0010e380 	call	10e38 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10b90:	00800044 	movi	r2,1
   10b94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10b98:	dfc00017 	ldw	ra,0(sp)
   10b9c:	dec00104 	addi	sp,sp,4
   10ba0:	f800283a 	ret

00010ba4 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10ba4:	01000074 	movhi	r4,1
   10ba8:	d1600404 	addi	r5,gp,-32752
   10bac:	2103e304 	addi	r4,r4,3980
   10bb0:	0010d541 	jmpi	10d54 <alt_dev_llist_insert>

00010bb4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10bb4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10bb8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10bbc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10bc0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10bc4:	2980072e 	bgeu	r5,r6,10be4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10bc8:	38c00037 	ldwio	r3,0(r7)
   10bcc:	18ffffec 	andhi	r3,r3,65535
   10bd0:	183ffc26 	beq	r3,zero,10bc4 <__alt_data_end+0xffff0bc4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10bd4:	28c00007 	ldb	r3,0(r5)
   10bd8:	20c00035 	stwio	r3,0(r4)
   10bdc:	29400044 	addi	r5,r5,1
   10be0:	003ff806 	br	10bc4 <__alt_data_end+0xffff0bc4>

  return count;
}
   10be4:	f800283a 	ret

00010be8 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10be8:	d1600404 	addi	r5,gp,-32752
   10bec:	0010dc01 	jmpi	10dc0 <alt_find_dev>

00010bf0 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10bf0:	20800a17 	ldw	r2,40(r4)
   10bf4:	10800023 	ldbuio	r2,0(r2)
   10bf8:	28800005 	stb	r2,0(r5)

	return 0;
}
   10bfc:	0005883a 	mov	r2,zero
   10c00:	f800283a 	ret

00010c04 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c04:	20800a17 	ldw	r2,40(r4)
   10c08:	29400fcc 	andi	r5,r5,63
   10c0c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c10:	20800a17 	ldw	r2,40(r4)
   10c14:	10800063 	ldbuio	r2,1(r2)
   10c18:	30800005 	stb	r2,0(r6)

	return 0;
}
   10c1c:	0005883a 	mov	r2,zero
   10c20:	f800283a 	ret

00010c24 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c24:	20800a17 	ldw	r2,40(r4)
   10c28:	29400fcc 	andi	r5,r5,63
   10c2c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10c30:	20800a17 	ldw	r2,40(r4)
   10c34:	11800065 	stbio	r6,1(r2)

	return 0;
}
   10c38:	0005883a 	mov	r2,zero
   10c3c:	f800283a 	ret

00010c40 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c40:	20800a17 	ldw	r2,40(r4)
   10c44:	00c00c84 	movi	r3,50
   10c48:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c4c:	20800a17 	ldw	r2,40(r4)
   10c50:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c54:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c58:	10803fcc 	andi	r2,r2,255
   10c5c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c60:	20800a17 	ldw	r2,40(r4)
   10c64:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10c68:	20800a17 	ldw	r2,40(r4)
   10c6c:	10800063 	ldbuio	r2,1(r2)
   10c70:	10803fcc 	andi	r2,r2,255
   10c74:	1006923a 	slli	r3,r2,8
   10c78:	28800017 	ldw	r2,0(r5)
   10c7c:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   10c80:	10e0000c 	andi	r3,r2,32768
   10c84:	18000126 	beq	r3,zero,10c8c <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   10c88:	10bffff4 	orhi	r2,r2,65535
   10c8c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10c90:	0005883a 	mov	r2,zero
   10c94:	f800283a 	ret

00010c98 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c98:	20800a17 	ldw	r2,40(r4)
   10c9c:	00c00d04 	movi	r3,52
   10ca0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10ca4:	20800a17 	ldw	r2,40(r4)
   10ca8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10cac:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10cb0:	10803fcc 	andi	r2,r2,255
   10cb4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10cb8:	20800a17 	ldw	r2,40(r4)
   10cbc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10cc0:	20800a17 	ldw	r2,40(r4)
   10cc4:	10800063 	ldbuio	r2,1(r2)
   10cc8:	10803fcc 	andi	r2,r2,255
   10ccc:	1006923a 	slli	r3,r2,8
   10cd0:	28800017 	ldw	r2,0(r5)
   10cd4:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   10cd8:	10e0000c 	andi	r3,r2,32768
   10cdc:	18000126 	beq	r3,zero,10ce4 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   10ce0:	10bffff4 	orhi	r2,r2,65535
   10ce4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10ce8:	0005883a 	mov	r2,zero
   10cec:	f800283a 	ret

00010cf0 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10cf0:	20800a17 	ldw	r2,40(r4)
   10cf4:	00c00d84 	movi	r3,54
   10cf8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10cfc:	20800a17 	ldw	r2,40(r4)
   10d00:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10d04:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10d08:	10803fcc 	andi	r2,r2,255
   10d0c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10d10:	20800a17 	ldw	r2,40(r4)
   10d14:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10d18:	20800a17 	ldw	r2,40(r4)
   10d1c:	10800063 	ldbuio	r2,1(r2)
   10d20:	10803fcc 	andi	r2,r2,255
   10d24:	1006923a 	slli	r3,r2,8
   10d28:	28800017 	ldw	r2,0(r5)
   10d2c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   10d30:	10e0000c 	andi	r3,r2,32768
   10d34:	18000126 	beq	r3,zero,10d3c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   10d38:	10bffff4 	orhi	r2,r2,65535
   10d3c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10d40:	0005883a 	mov	r2,zero
   10d44:	f800283a 	ret

00010d48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10d48:	f800283a 	ret

00010d4c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   10d4c:	3005883a 	mov	r2,r6
   10d50:	f800283a 	ret

00010d54 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10d54:	20000226 	beq	r4,zero,10d60 <alt_dev_llist_insert+0xc>
   10d58:	20800217 	ldw	r2,8(r4)
   10d5c:	1000101e 	bne	r2,zero,10da0 <alt_dev_llist_insert+0x4c>
   10d60:	d0a00817 	ldw	r2,-32736(gp)
   10d64:	10000926 	beq	r2,zero,10d8c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10d68:	deffff04 	addi	sp,sp,-4
   10d6c:	dfc00015 	stw	ra,0(sp)
   10d70:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10d74:	00c00584 	movi	r3,22
   10d78:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10d7c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10d80:	dfc00017 	ldw	ra,0(sp)
   10d84:	dec00104 	addi	sp,sp,4
   10d88:	f800283a 	ret
   10d8c:	d0a06b04 	addi	r2,gp,-32340
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10d90:	00c00584 	movi	r3,22
   10d94:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10d98:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10d9c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10da0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10da4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10da8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10dac:	28800017 	ldw	r2,0(r5)
   10db0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10db4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10db8:	0005883a 	mov	r2,zero
   10dbc:	f800283a 	ret

00010dc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10dc0:	defffb04 	addi	sp,sp,-20
   10dc4:	dcc00315 	stw	r19,12(sp)
   10dc8:	dc800215 	stw	r18,8(sp)
   10dcc:	dc400115 	stw	r17,4(sp)
   10dd0:	dc000015 	stw	r16,0(sp)
   10dd4:	dfc00415 	stw	ra,16(sp)
   10dd8:	2027883a 	mov	r19,r4
   10ddc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   10de0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   10de4:	00107c80 	call	107c8 <strlen>
   10de8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10dec:	84400726 	beq	r16,r17,10e0c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10df0:	81000217 	ldw	r4,8(r16)
   10df4:	900d883a 	mov	r6,r18
   10df8:	980b883a 	mov	r5,r19
   10dfc:	0010e400 	call	10e40 <memcmp>
   10e00:	10000426 	beq	r2,zero,10e14 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   10e04:	84000017 	ldw	r16,0(r16)
   10e08:	003ff806 	br	10dec <__alt_data_end+0xffff0dec>
  }
  
  /* No match found */
  
  return NULL;
   10e0c:	0005883a 	mov	r2,zero
   10e10:	00000106 	br	10e18 <alt_find_dev+0x58>
   10e14:	8005883a 	mov	r2,r16
}
   10e18:	dfc00417 	ldw	ra,16(sp)
   10e1c:	dcc00317 	ldw	r19,12(sp)
   10e20:	dc800217 	ldw	r18,8(sp)
   10e24:	dc400117 	ldw	r17,4(sp)
   10e28:	dc000017 	ldw	r16,0(sp)
   10e2c:	dec00504 	addi	sp,sp,20
   10e30:	f800283a 	ret

00010e34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10e34:	f800283a 	ret

00010e38 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10e38:	000170fa 	wrctl	ienable,zero
   10e3c:	f800283a 	ret

00010e40 <memcmp>:
   10e40:	218d883a 	add	r6,r4,r6
   10e44:	21800826 	beq	r4,r6,10e68 <memcmp+0x28>
   10e48:	20800003 	ldbu	r2,0(r4)
   10e4c:	28c00003 	ldbu	r3,0(r5)
   10e50:	10c00226 	beq	r2,r3,10e5c <memcmp+0x1c>
   10e54:	10c5c83a 	sub	r2,r2,r3
   10e58:	f800283a 	ret
   10e5c:	21000044 	addi	r4,r4,1
   10e60:	29400044 	addi	r5,r5,1
   10e64:	003ff706 	br	10e44 <__alt_data_end+0xffff0e44>
   10e68:	0005883a 	mov	r2,zero
   10e6c:	f800283a 	ret
