
temp_test_3.elf:     file format elf32-littlenios2
temp_test_3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000009f4 memsz 0x000009f4 flags r-x
    LOAD off    0x00001a14 vaddr 0x00010a14 paddr 0x00010ac0 align 2**12
         filesz 0x000000ac memsz 0x000000ac flags rw-
    LOAD off    0x00001b6c vaddr 0x00010b6c paddr 0x00010b6c align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000808  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  00010988  00010988  00001988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000ac  00010a14  00010ac0  00001a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  00010b6c  00010b6c  00001b6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010ca0  00010ca0  00001ac0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000320  00000000  00000000  00001ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000027f2  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001348  00000000  00000000  000045fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001142  00000000  00000000  00005942  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000390  00000000  00000000  00006a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fed  00000000  00000000  00006e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006f7  00000000  00000000  00007e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000084f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  00008508  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009a1e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00009a21  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009a24  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00009a25  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00009a26  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00009a2f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00009a38  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00009a41  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004a  00000000  00000000  00009a53  2**0
                  CONTENTS, READONLY
 26 .jdi          00005004  00000000  00000000  00009a9d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000501f4  00000000  00000000  0000eaa1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00010988 l    d  .rodata	00000000 .rodata
00010a14 l    d  .rwdata	00000000 .rwdata
00010b6c l    d  .bss	00000000 .bss
00010ca0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../temp_test_3_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010a14 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010740 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000107a8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00010b98 g     O .bss	00000004 alt_instruction_exception_handler
000104b8 g     F .text	0000002c alt_main
00010ba0 g     O .bss	00000100 alt_irq
00010ac0 g       *ABS*	00000000 __flash_rwdata_start
00010b88 g     O .bss	00000004 altera_avalon_timer_ts_freq
000109a0 g     O .rodata	00000050 fixed_coeffs
000101bc g     F .text	00000080 sys_timer_isr
00010a9c g     O .rwdata	00000004 jtag_uart
0001090c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010b9c g     O .bss	00000004 errno
00010b80 g     O .bss	00000004 alt_argv
00018a98 g       *ABS*	00000000 _gp
00010a40 g     O .rwdata	00000030 alt_fd_list
00010914 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010aa0 g     O .rwdata	00000004 alt_max_fd
00010344 g     F .text	00000094 alt_irq_register
00010ca0 g       *ABS*	00000000 __bss_end
00010854 g     F .text	000000b8 alt_tick
000102ac g     F .text	00000010 fir_x_read
00010820 g     F .text	00000034 alt_alarm_stop
00010b78 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00010a70 g     O .rwdata	00000028 alt_dev_null
000107a4 g     F .text	00000004 alt_dcache_flush_all
00010ac0 g       *ABS*	00000000 __ram_rwdata_end
0001023c g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010aa4 g     O .rwdata	00000008 alt_dev_list
00010a14 g       *ABS*	00000000 __ram_rodata_end
00010b70 g     O .bss	00000002 led
00010ca0 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001077c g     F .text	00000028 alt_avalon_timer_sc_init
0001070c g     F .text	00000034 altera_avalon_jtag_uart_write
000104e4 g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
00010b74 g     O .bss	00000004 level
00010b94 g     O .bss	00000004 _alt_tick_rate
00010b90 g     O .bss	00000004 _alt_nticks
000106bc g     F .text	00000050 alt_sys_init
00010a14 g       *ABS*	00000000 __ram_rwdata_start
00010988 g       *ABS*	00000000 __ram_rodata_start
00010ca0 g       *ABS*	00000000 __alt_stack_base
000107b0 g     F .text	0000006c alt_dev_llist_insert
00010b6c g       *ABS*	00000000 __bss_start
000102cc g     F .text	00000078 main
000102bc g     F .text	00000010 fir_x_write
00010b7c g     O .bss	00000004 alt_envp
00010ab4 g     O .rwdata	00000004 alt_errno
00010988 g       *ABS*	00000000 __flash_rodata_start
0001069c g     F .text	00000020 alt_irq_init
00010b84 g     O .bss	00000004 alt_argc
00010b8c g     O .bss	00000004 altera_avalon_timer_ts_base
00010020 g       .exceptions	00000000 alt_irq_entry
00010b6c g     O .bss	00000001 pwm
00010aac g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010ac0 g       *ABS*	00000000 _edata
00010ca0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00010654 g     F .text	00000048 alt_putchar
0001081c g     F .text	00000004 alt_icache_flush_all
00010a98 g     O .rwdata	00000004 alt_priority_mask
00010ab8 g     O .rwdata	00000008 alt_alarm_list
000103d8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8402e804 	addi	r16,r16,2976

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a04017 	ldw	r2,-32512(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a2a614 	ori	gp,gp,35480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1082db14 	ori	r2,r2,2924

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c32814 	ori	r3,r3,3232

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00103d80 	call	103d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00104b80 	call	104b8 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
                     : (16 >> val);
    *level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a03717 	ldw	r2,-32548(gp)
   101cc:	d1603507 	ldb	r5,-32556(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c41804 	addi	r3,r3,4192
   101e4:	2900070e 	bge	r5,r4,10204 <sys_timer_isr+0x48>
        if (level < 0) {
   101e8:	1000030e 	bge	r2,zero,101f8 <sys_timer_isr+0x3c>
}

/* Write pattern to LEDs */
static inline void led_write(alt_u16 led_pattern) {
    /*  Only 10 least significant bits are used (each corresponds to an LED) */
    IOWR(LED_BASE, 0, (led_pattern & 0x3ff));
   101ec:	d0a0360b 	ldhu	r2,-32552(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	00000406 	br	10208 <sys_timer_isr+0x4c>
   101f8:	d0a0360b 	ldhu	r2,-32552(gp)
   101fc:	1004d07a 	srli	r2,r2,1
   10200:	00000106 	br	10208 <sys_timer_isr+0x4c>
   10204:	d0a0360b 	ldhu	r2,-32552(gp)
   10208:	1080ffcc 	andi	r2,r2,1023
   1020c:	18800035 	stwio	r2,0(r3)
        }
    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a03503 	ldbu	r2,-32556(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0203505 	stb	zero,-32556(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a03505 	stb	r2,-32556(gp)
   10238:	f800283a 	ret

0001023c <timer_init>:
    }
}

void timer_init(void *isr) {
   1023c:	defffe04 	addi	sp,sp,-8
   10240:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10244:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }
}

void timer_init(void *isr) {
   10248:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1024c:	84040904 	addi	r16,r16,4132
   10250:	008000c4 	movi	r2,3
   10254:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10258:	00c000b4 	movhi	r3,2
   1025c:	0005883a 	mov	r2,zero
   10260:	18c40804 	addi	r3,r3,4128
   10264:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10268:	00c000b4 	movhi	r3,2
   1026c:	18c40a04 	addi	r3,r3,4136
   10270:	01424004 	movi	r5,2304
   10274:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10278:	00c000b4 	movhi	r3,2
   1027c:	18c40b04 	addi	r3,r3,4140
   10280:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10284:	200d883a 	mov	r6,r4
   10288:	000b883a 	mov	r5,zero
   1028c:	01000044 	movi	r4,1
   10290:	00103440 	call	10344 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10294:	008001c4 	movi	r2,7
   10298:	80800035 	stwio	r2,0(r16)
}
   1029c:	dfc00117 	ldw	ra,4(sp)
   102a0:	dc000017 	ldw	r16,0(sp)
   102a4:	dec00204 	addi	sp,sp,8
   102a8:	f800283a 	ret

000102ac <fir_x_read>:

alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
}
   102ac:	008000b4 	movhi	r2,2
   102b0:	10841404 	addi	r2,r2,4176
   102b4:	10800037 	ldwio	r2,0(r2)
   102b8:	f800283a 	ret

000102bc <fir_x_write>:

void fir_x_write(alt_32 x_val){
	IOWR(FIR_IN_X_BASE, 0, x_val);
   102bc:	008000b4 	movhi	r2,2
   102c0:	10841004 	addi	r2,r2,4160
   102c4:	11000035 	stwio	r4,0(r2)
   102c8:	f800283a 	ret

000102cc <main>:
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
   102cc:	008000b4 	movhi	r2,2
}




int main() {
   102d0:	defffd04 	addi	sp,sp,-12
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
   102d4:	10841404 	addi	r2,r2,4176
}




int main() {
   102d8:	dfc00215 	stw	ra,8(sp)
   102dc:	dc400115 	stw	r17,4(sp)
   102e0:	dc000015 	stw	r16,0(sp)
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
   102e4:	14400037 	ldwio	r17,0(r2)

int main() {

	alt_32 val_read;
	val_read = fir_x_read();
	alt_printf("the value read is: %x\n", val_read);
   102e8:	04000074 	movhi	r16,1
   102ec:	84026204 	addi	r16,r16,2440
   102f0:	880b883a 	mov	r5,r17
   102f4:	8009883a 	mov	r4,r16
   102f8:	00104e40 	call	104e4 <alt_printf>
	alt_printf("the value read is: %x\n", val_read);
   102fc:	880b883a 	mov	r5,r17
   10300:	8009883a 	mov	r4,r16
   10304:	00104e40 	call	104e4 <alt_printf>
	alt_printf("the value read is: %x\n", val_read);
   10308:	880b883a 	mov	r5,r17
   1030c:	8009883a 	mov	r4,r16
   10310:	00104e40 	call	104e4 <alt_printf>
	alt_printf("the value read is: %x\n", val_read);
   10314:	880b883a 	mov	r5,r17
   10318:	8009883a 	mov	r4,r16
   1031c:	00104e40 	call	104e4 <alt_printf>
	alt_printf("the value read is: %x\n", val_read);
   10320:	880b883a 	mov	r5,r17
   10324:	8009883a 	mov	r4,r16
   10328:	00104e40 	call	104e4 <alt_printf>
    //         loop_timer = 0;
    //     }
    //     alt_timestamp_start();  // Restart system timer
    // }

}
   1032c:	0005883a 	mov	r2,zero
   10330:	dfc00217 	ldw	ra,8(sp)
   10334:	dc400117 	ldw	r17,4(sp)
   10338:	dc000017 	ldw	r16,0(sp)
   1033c:	dec00304 	addi	sp,sp,12
   10340:	f800283a 	ret

00010344 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10344:	008007c4 	movi	r2,31
   10348:	11002136 	bltu	r2,r4,103d0 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1034c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10350:	00ffff84 	movi	r3,-2
   10354:	38c4703a 	and	r2,r7,r3
   10358:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   1035c:	200490fa 	slli	r2,r4,3
   10360:	02000074 	movhi	r8,1
   10364:	4202e804 	addi	r8,r8,2976
   10368:	4085883a 	add	r2,r8,r2
   1036c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10370:	11400115 	stw	r5,4(r2)
   10374:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10378:	30000726 	beq	r6,zero,10398 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1037c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10380:	28c6703a 	and	r3,r5,r3
   10384:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10388:	d0e03817 	ldw	r3,-32544(gp)
   1038c:	1104983a 	sll	r2,r2,r4
   10390:	10c4b03a 	or	r2,r2,r3
   10394:	00000706 	br	103b4 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10398:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1039c:	28c6703a 	and	r3,r5,r3
   103a0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   103a4:	1104983a 	sll	r2,r2,r4
   103a8:	d0e03817 	ldw	r3,-32544(gp)
   103ac:	0084303a 	nor	r2,zero,r2
   103b0:	10c4703a 	and	r2,r2,r3
   103b4:	d0a03815 	stw	r2,-32544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   103b8:	d0a03817 	ldw	r2,-32544(gp)
   103bc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103c0:	2801703a 	wrctl	status,r5
   103c4:	3801703a 	wrctl	status,r7
   103c8:	0005883a 	mov	r2,zero
   103cc:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   103d0:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   103d4:	f800283a 	ret

000103d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103d8:	deffff04 	addi	sp,sp,-4
   103dc:	01000074 	movhi	r4,1
   103e0:	01400074 	movhi	r5,1
   103e4:	dfc00015 	stw	ra,0(sp)
   103e8:	21028504 	addi	r4,r4,2580
   103ec:	2942b004 	addi	r5,r5,2752

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   103f0:	2140061e 	bne	r4,r5,1040c <alt_load+0x34>
   103f4:	01000074 	movhi	r4,1
   103f8:	01400074 	movhi	r5,1
   103fc:	21000804 	addi	r4,r4,32
   10400:	29400804 	addi	r5,r5,32
   10404:	2140121e 	bne	r4,r5,10450 <alt_load+0x78>
   10408:	00000b06 	br	10438 <alt_load+0x60>
   1040c:	00c00074 	movhi	r3,1
   10410:	18c2b004 	addi	r3,r3,2752
   10414:	1907c83a 	sub	r3,r3,r4
   10418:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1041c:	10fff526 	beq	r2,r3,103f4 <__alt_data_end+0xffff03f4>
    {
      *to++ = *from++;
   10420:	114f883a 	add	r7,r2,r5
   10424:	39c00017 	ldw	r7,0(r7)
   10428:	110d883a 	add	r6,r2,r4
   1042c:	10800104 	addi	r2,r2,4
   10430:	31c00015 	stw	r7,0(r6)
   10434:	003ff906 	br	1041c <__alt_data_end+0xffff041c>
   10438:	01000074 	movhi	r4,1
   1043c:	01400074 	movhi	r5,1
   10440:	21026204 	addi	r4,r4,2440
   10444:	29426204 	addi	r5,r5,2440

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10448:	2140101e 	bne	r4,r5,1048c <alt_load+0xb4>
   1044c:	00000b06 	br	1047c <alt_load+0xa4>
   10450:	00c00074 	movhi	r3,1
   10454:	18c06004 	addi	r3,r3,384
   10458:	1907c83a 	sub	r3,r3,r4
   1045c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10460:	10fff526 	beq	r2,r3,10438 <__alt_data_end+0xffff0438>
    {
      *to++ = *from++;
   10464:	114f883a 	add	r7,r2,r5
   10468:	39c00017 	ldw	r7,0(r7)
   1046c:	110d883a 	add	r6,r2,r4
   10470:	10800104 	addi	r2,r2,4
   10474:	31c00015 	stw	r7,0(r6)
   10478:	003ff906 	br	10460 <__alt_data_end+0xffff0460>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1047c:	00107a40 	call	107a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10480:	dfc00017 	ldw	ra,0(sp)
   10484:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10488:	001081c1 	jmpi	1081c <alt_icache_flush_all>
   1048c:	00c00074 	movhi	r3,1
   10490:	18c28504 	addi	r3,r3,2580
   10494:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10498:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1049c:	18bff726 	beq	r3,r2,1047c <__alt_data_end+0xffff047c>
    {
      *to++ = *from++;
   104a0:	114f883a 	add	r7,r2,r5
   104a4:	39c00017 	ldw	r7,0(r7)
   104a8:	110d883a 	add	r6,r2,r4
   104ac:	10800104 	addi	r2,r2,4
   104b0:	31c00015 	stw	r7,0(r6)
   104b4:	003ff906 	br	1049c <__alt_data_end+0xffff049c>

000104b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104b8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104bc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104c0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104c4:	001069c0 	call	1069c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104c8:	00106bc0 	call	106bc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104cc:	d1a03917 	ldw	r6,-32540(gp)
   104d0:	d1603a17 	ldw	r5,-32536(gp)
   104d4:	d1203b17 	ldw	r4,-32532(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   104d8:	dfc00017 	ldw	ra,0(sp)
   104dc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104e0:	00102cc1 	jmpi	102cc <main>

000104e4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   104e4:	defff204 	addi	sp,sp,-56
   104e8:	2005883a 	mov	r2,r4
   104ec:	dfc00a15 	stw	ra,40(sp)
   104f0:	df000915 	stw	fp,36(sp)
   104f4:	ddc00815 	stw	r23,32(sp)
   104f8:	dd800715 	stw	r22,28(sp)
   104fc:	dd400615 	stw	r21,24(sp)
   10500:	dd000515 	stw	r20,20(sp)
   10504:	dcc00415 	stw	r19,16(sp)
   10508:	dc800315 	stw	r18,12(sp)
   1050c:	dc400215 	stw	r17,8(sp)
   10510:	dc000115 	stw	r16,4(sp)
   10514:	d9400b15 	stw	r5,44(sp)
   10518:	d9800c15 	stw	r6,48(sp)
   1051c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10520:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   10524:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   10528:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   1052c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   10530:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10534:	11000007 	ldb	r4,0(r2)
   10538:	20003a26 	beq	r4,zero,10624 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1053c:	24000226 	beq	r4,r16,10548 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10540:	14400044 	addi	r17,r2,1
   10544:	00001406 	br	10598 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   10548:	14400084 	addi	r17,r2,2
   1054c:	10800047 	ldb	r2,1(r2)
   10550:	10003426 	beq	r2,zero,10624 <alt_printf+0x140>
            {
                if (c == '%')
   10554:	1400021e 	bne	r2,r16,10560 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   10558:	8009883a 	mov	r4,r16
   1055c:	00000e06 	br	10598 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   10560:	1480051e 	bne	r2,r18,10578 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   10564:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   10568:	ad800104 	addi	r22,r21,4
   1056c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   10570:	00106540 	call	10654 <alt_putchar>
   10574:	00002906 	br	1061c <alt_printf+0x138>
                }
                else if (c == 'x')
   10578:	14c0201e 	bne	r2,r19,105fc <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1057c:	adc00017 	ldw	r23,0(r21)
   10580:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   10584:	b8000326 	beq	r23,zero,10594 <alt_printf+0xb0>
   10588:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1058c:	00c003c4 	movi	r3,15
   10590:	00000306 	br	105a0 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   10594:	01000c04 	movi	r4,48
   10598:	00106540 	call	10654 <alt_putchar>
                        continue;
   1059c:	00001f06 	br	1061c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   105a0:	1d84983a 	sll	r2,r3,r22
   105a4:	15c4703a 	and	r2,r2,r23
   105a8:	1000021e 	bne	r2,zero,105b4 <alt_printf+0xd0>
                        digit_shift -= 4;
   105ac:	b5bfff04 	addi	r22,r22,-4
   105b0:	003ffb06 	br	105a0 <__alt_data_end+0xffff05a0>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   105b4:	070003c4 	movi	fp,15
                        if (digit <= 9)
   105b8:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105bc:	b0001716 	blt	r22,zero,1061c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   105c0:	e588983a 	sll	r4,fp,r22
   105c4:	25c8703a 	and	r4,r4,r23
   105c8:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   105cc:	19000236 	bltu	r3,r4,105d8 <alt_printf+0xf4>
                            c = '0' + digit;
   105d0:	21000c04 	addi	r4,r4,48
   105d4:	00000106 	br	105dc <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   105d8:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   105dc:	21003fcc 	andi	r4,r4,255
   105e0:	2100201c 	xori	r4,r4,128
   105e4:	213fe004 	addi	r4,r4,-128
   105e8:	d8c00015 	stw	r3,0(sp)
   105ec:	00106540 	call	10654 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105f0:	b5bfff04 	addi	r22,r22,-4
   105f4:	d8c00017 	ldw	r3,0(sp)
   105f8:	003ff006 	br	105bc <__alt_data_end+0xffff05bc>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   105fc:	1500071e 	bne	r2,r20,1061c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   10600:	ad800017 	ldw	r22,0(r21)
   10604:	ad400104 	addi	r21,r21,4

                    while(*s)
   10608:	b1000007 	ldb	r4,0(r22)
   1060c:	20000326 	beq	r4,zero,1061c <alt_printf+0x138>
                      alt_putchar(*s++);
   10610:	b5800044 	addi	r22,r22,1
   10614:	00106540 	call	10654 <alt_putchar>
   10618:	003ffb06 	br	10608 <__alt_data_end+0xffff0608>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   1061c:	8805883a 	mov	r2,r17
   10620:	003fc406 	br	10534 <__alt_data_end+0xffff0534>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   10624:	dfc00a17 	ldw	ra,40(sp)
   10628:	df000917 	ldw	fp,36(sp)
   1062c:	ddc00817 	ldw	r23,32(sp)
   10630:	dd800717 	ldw	r22,28(sp)
   10634:	dd400617 	ldw	r21,24(sp)
   10638:	dd000517 	ldw	r20,20(sp)
   1063c:	dcc00417 	ldw	r19,16(sp)
   10640:	dc800317 	ldw	r18,12(sp)
   10644:	dc400217 	ldw	r17,8(sp)
   10648:	dc000117 	ldw	r16,4(sp)
   1064c:	dec00e04 	addi	sp,sp,56
   10650:	f800283a 	ret

00010654 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10654:	defffd04 	addi	sp,sp,-12
   10658:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   1065c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10660:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   10664:	01000074 	movhi	r4,1
   10668:	000f883a 	mov	r7,zero
   1066c:	01800044 	movi	r6,1
   10670:	d80b883a 	mov	r5,sp
   10674:	2102a704 	addi	r4,r4,2716
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10678:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1067c:	001070c0 	call	1070c <altera_avalon_jtag_uart_write>
   10680:	00ffffc4 	movi	r3,-1
   10684:	10c00126 	beq	r2,r3,1068c <alt_putchar+0x38>
        return -1;
    }
    return c;
   10688:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   1068c:	dfc00217 	ldw	ra,8(sp)
   10690:	dc000117 	ldw	r16,4(sp)
   10694:	dec00304 	addi	sp,sp,12
   10698:	f800283a 	ret

0001069c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1069c:	deffff04 	addi	sp,sp,-4
   106a0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   106a4:	001090c0 	call	1090c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   106a8:	00800044 	movi	r2,1
   106ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   106b0:	dfc00017 	ldw	ra,0(sp)
   106b4:	dec00104 	addi	sp,sp,4
   106b8:	f800283a 	ret

000106bc <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   106bc:	008000b4 	movhi	r2,2
   106c0:	10840804 	addi	r2,r2,4128
   106c4:	d0a03d15 	stw	r2,-32524(gp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   106c8:	010000b4 	movhi	r4,2
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   106cc:	0080bef4 	movhi	r2,763
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   106d0:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   106d4:	10bc2004 	addi	r2,r2,-3968
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   106d8:	01c0fa04 	movi	r7,1000
   106dc:	018000c4 	movi	r6,3
   106e0:	000b883a 	mov	r5,zero
   106e4:	21040004 	addi	r4,r4,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   106e8:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   106ec:	d0a03c15 	stw	r2,-32528(gp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   106f0:	001077c0 	call	1077c <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   106f4:	01000074 	movhi	r4,1
   106f8:	d1600304 	addi	r5,gp,-32756
   106fc:	21028504 	addi	r4,r4,2580
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
}
   10700:	dfc00017 	ldw	ra,0(sp)
   10704:	dec00104 	addi	sp,sp,4
   10708:	00107b01 	jmpi	107b0 <alt_dev_llist_insert>

0001070c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1070c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10710:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10714:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10718:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1071c:	2980072e 	bgeu	r5,r6,1073c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10720:	38c00037 	ldwio	r3,0(r7)
   10724:	18ffffec 	andhi	r3,r3,65535
   10728:	183ffc26 	beq	r3,zero,1071c <__alt_data_end+0xffff071c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1072c:	28c00007 	ldb	r3,0(r5)
   10730:	20c00035 	stwio	r3,0(r4)
   10734:	29400044 	addi	r5,r5,1
   10738:	003ff806 	br	1071c <__alt_data_end+0xffff071c>

  return count;
}
   1073c:	f800283a 	ret

00010740 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10740:	defffe04 	addi	sp,sp,-8
   10744:	dfc00115 	stw	ra,4(sp)
   10748:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1074c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10750:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10754:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10758:	00bfff84 	movi	r2,-2
   1075c:	8084703a 	and	r2,r16,r2
   10760:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   10764:	00108540 	call	10854 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10768:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   1076c:	dfc00117 	ldw	ra,4(sp)
   10770:	dc000017 	ldw	r16,0(sp)
   10774:	dec00204 	addi	sp,sp,8
   10778:	f800283a 	ret

0001077c <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1077c:	d0a03f17 	ldw	r2,-32516(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10780:	200b883a 	mov	r5,r4
   10784:	3009883a 	mov	r4,r6
   10788:	1000011e 	bne	r2,zero,10790 <alt_avalon_timer_sc_init+0x14>
  {
    _alt_tick_rate = nticks;
   1078c:	d1e03f15 	stw	r7,-32516(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10790:	008001c4 	movi	r2,7
   10794:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   10798:	01800074 	movhi	r6,1
   1079c:	3181d004 	addi	r6,r6,1856
   107a0:	00103441 	jmpi	10344 <alt_irq_register>

000107a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   107a4:	f800283a 	ret

000107a8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   107a8:	3005883a 	mov	r2,r6
   107ac:	f800283a 	ret

000107b0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   107b0:	20000226 	beq	r4,zero,107bc <alt_dev_llist_insert+0xc>
   107b4:	20800217 	ldw	r2,8(r4)
   107b8:	1000101e 	bne	r2,zero,107fc <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   107bc:	d0a00717 	ldw	r2,-32740(gp)
   107c0:	10000926 	beq	r2,zero,107e8 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   107c4:	deffff04 	addi	sp,sp,-4
   107c8:	dfc00015 	stw	ra,0(sp)
   107cc:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   107d0:	00c00584 	movi	r3,22
   107d4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   107d8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   107dc:	dfc00017 	ldw	ra,0(sp)
   107e0:	dec00104 	addi	sp,sp,4
   107e4:	f800283a 	ret
   107e8:	d0a04104 	addi	r2,gp,-32508
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   107ec:	00c00584 	movi	r3,22
   107f0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   107f4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   107f8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   107fc:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10800:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10804:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10808:	28800017 	ldw	r2,0(r5)
   1080c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10810:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10814:	0005883a 	mov	r2,zero
   10818:	f800283a 	ret

0001081c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1081c:	f800283a 	ret

00010820 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10820:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10824:	00bfff84 	movi	r2,-2
   10828:	1884703a 	and	r2,r3,r2
   1082c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10830:	21400117 	ldw	r5,4(r4)
   10834:	20800017 	ldw	r2,0(r4)
   10838:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   1083c:	21400117 	ldw	r5,4(r4)
   10840:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10844:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   10848:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1084c:	1801703a 	wrctl	status,r3
   10850:	f800283a 	ret

00010854 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10854:	d0a03e17 	ldw	r2,-32520(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10858:	defffb04 	addi	sp,sp,-20
   1085c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10860:	d4200817 	ldw	r16,-32736(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10864:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10868:	dc800215 	stw	r18,8(sp)
   1086c:	dc400115 	stw	r17,4(sp)
   10870:	dfc00415 	stw	ra,16(sp)
   10874:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10878:	d0a03e15 	stw	r2,-32520(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1087c:	d4600804 	addi	r17,gp,-32736
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   10880:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10884:	84401a26 	beq	r16,r17,108f0 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10888:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   1088c:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10890:	10000326 	beq	r2,zero,108a0 <alt_tick+0x4c>
   10894:	d0a03e17 	ldw	r2,-32520(gp)
   10898:	1000011e 	bne	r2,zero,108a0 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   1089c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   108a0:	d0e03e17 	ldw	r3,-32520(gp)
   108a4:	80800217 	ldw	r2,8(r16)
   108a8:	18800f36 	bltu	r3,r2,108e8 <alt_tick+0x94>
   108ac:	80800403 	ldbu	r2,16(r16)
   108b0:	10000d1e 	bne	r2,zero,108e8 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   108b4:	80800317 	ldw	r2,12(r16)
   108b8:	81000517 	ldw	r4,20(r16)
   108bc:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   108c0:	1000031e 	bne	r2,zero,108d0 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   108c4:	8009883a 	mov	r4,r16
   108c8:	00108200 	call	10820 <alt_alarm_stop>
   108cc:	00000606 	br	108e8 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   108d0:	80c00217 	ldw	r3,8(r16)
   108d4:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   108d8:	d0e03e17 	ldw	r3,-32520(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   108dc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   108e0:	10c0012e 	bgeu	r2,r3,108e8 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   108e4:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   108e8:	9821883a 	mov	r16,r19
   108ec:	003fe506 	br	10884 <__alt_data_end+0xffff0884>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   108f0:	dfc00417 	ldw	ra,16(sp)
   108f4:	dcc00317 	ldw	r19,12(sp)
   108f8:	dc800217 	ldw	r18,8(sp)
   108fc:	dc400117 	ldw	r17,4(sp)
   10900:	dc000017 	ldw	r16,0(sp)
   10904:	dec00504 	addi	sp,sp,20
   10908:	f800283a 	ret

0001090c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1090c:	000170fa 	wrctl	ienable,zero
   10910:	f800283a 	ret

00010914 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   10914:	213ffe84 	addi	r4,r4,-6
   10918:	008003c4 	movi	r2,15
   1091c:	11001636 	bltu	r2,r4,10978 <alt_exception_cause_generated_bad_addr+0x64>
   10920:	200890ba 	slli	r4,r4,2
   10924:	00800074 	movhi	r2,1
   10928:	10824e04 	addi	r2,r2,2360
   1092c:	2089883a 	add	r4,r4,r2
   10930:	20800017 	ldw	r2,0(r4)
   10934:	1000683a 	jmp	r2
   10938:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
   1093c:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
   10940:	00010978 	rdprs	zero,zero,1061
   10944:	00010978 	rdprs	zero,zero,1061
   10948:	00010978 	rdprs	zero,zero,1061
   1094c:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
   10950:	00010978 	rdprs	zero,zero,1061
   10954:	00010978 	rdprs	zero,zero,1061
   10958:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
   1095c:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
   10960:	00010978 	rdprs	zero,zero,1061
   10964:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
   10968:	00010978 	rdprs	zero,zero,1061
   1096c:	00010978 	rdprs	zero,zero,1061
   10970:	00010978 	rdprs	zero,zero,1061
   10974:	00010980 	call	1098 <__alt_mem_onchip_memory-0xef68>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10978:	0005883a 	mov	r2,zero
   1097c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10980:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   10984:	f800283a 	ret
