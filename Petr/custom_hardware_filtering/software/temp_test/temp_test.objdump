
temp_test.elf:     file format elf32-littlenios2
temp_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000089c memsz 0x0000089c flags r-x
    LOAD off    0x000018bc vaddr 0x000108bc paddr 0x00010960 align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x00001a04 vaddr 0x00010a04 paddr 0x00010a04 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000006a0  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000009c  00010820  00010820  00001820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  000108bc  00010960  000018bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00010a04  00010a04  00001a04  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010b28  00010b28  00001960  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002c8  00000000  00000000  00001988  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000021d0  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000fba  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000e76  00000000  00000000  00004dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002f8  00000000  00000000  00005c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ec7  00000000  00000000  00005f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000594  00000000  00000000  00006e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000073a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  000073b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000086ea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000086ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000086f0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000086f1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000086f2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000086fb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00008704  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0000870d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004a  00000000  00000000  0000871f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005004  00000000  00000000  00008769  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000501f4  00000000  00000000  0000d76d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00010820 l    d  .rodata	00000000 .rodata
000108bc l    d  .rwdata	00000000 .rwdata
00010a04 l    d  .bss	00000000 .bss
00010b28 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../temp_test_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000108bc l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001072c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00010a20 g     O .bss	00000004 alt_instruction_exception_handler
000104e0 g     F .text	0000002c alt_main
00010a28 g     O .bss	00000100 alt_irq
00010960 g       *ABS*	00000000 __flash_rwdata_start
00010848 g     O .rodata	00000050 fixed_coeffs
000101bc g     F .text	00000080 sys_timer_isr
00010944 g     O .rwdata	00000004 jtag_uart
000107a4 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010a24 g     O .bss	00000004 errno
00010a18 g     O .bss	00000004 alt_argv
00018940 g       *ABS*	00000000 _gp
000108e8 g     O .rwdata	00000030 alt_fd_list
000107ac g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010948 g     O .rwdata	00000004 alt_max_fd
0001036c g     F .text	00000094 alt_irq_register
00010b28 g       *ABS*	00000000 __bss_end
000102ac g     F .text	00000010 fir_x_read
00010a10 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00010918 g     O .rwdata	00000028 alt_dev_null
00010728 g     F .text	00000004 alt_dcache_flush_all
00010960 g       *ABS*	00000000 __ram_rwdata_end
0001023c g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001094c g     O .rwdata	00000008 alt_dev_list
000108bc g       *ABS*	00000000 __ram_rodata_end
00010a08 g     O .bss	00000002 led
00010b28 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000106f4 g     F .text	00000034 altera_avalon_jtag_uart_write
0001050c g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
00010a0c g     O .bss	00000004 level
000106e4 g     F .text	00000010 alt_sys_init
000108bc g       *ABS*	00000000 __ram_rwdata_start
00010820 g       *ABS*	00000000 __ram_rodata_start
00010b28 g       *ABS*	00000000 __alt_stack_base
00010734 g     F .text	0000006c alt_dev_llist_insert
00010a04 g       *ABS*	00000000 __bss_start
000102cc g     F .text	000000a0 main
000102bc g     F .text	00000010 fir_x_write
00010a14 g     O .bss	00000004 alt_envp
0001095c g     O .rwdata	00000004 alt_errno
00010820 g       *ABS*	00000000 __flash_rodata_start
000106c4 g     F .text	00000020 alt_irq_init
00010a1c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00010a04 g     O .bss	00000001 pwm
00010954 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010960 g       *ABS*	00000000 _edata
00010b28 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
0001067c g     F .text	00000048 alt_putchar
000107a0 g     F .text	00000004 alt_icache_flush_all
00010940 g     O .rwdata	00000004 alt_priority_mask
00010400 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84028a04 	addi	r16,r16,2600

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a03817 	ldw	r2,-32544(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a25014 	ori	gp,gp,35136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10828114 	ori	r2,r2,2564

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c2ca14 	ori	r3,r3,2856

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00104000 	call	10400 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00104e00 	call	104e0 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
                     : (16 >> val);
    *level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a03317 	ldw	r2,-32564(gp)
   101cc:	d1603107 	ldb	r5,-32572(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c41804 	addi	r3,r3,4192
   101e4:	2900070e 	bge	r5,r4,10204 <sys_timer_isr+0x48>
        if (level < 0) {
   101e8:	1000030e 	bge	r2,zero,101f8 <sys_timer_isr+0x3c>
}

/* Write pattern to LEDs */
static inline void led_write(alt_u16 led_pattern) {
    /*  Only 10 least significant bits are used (each corresponds to an LED) */
    IOWR(LED_BASE, 0, (led_pattern & 0x3ff));
   101ec:	d0a0320b 	ldhu	r2,-32568(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	00000406 	br	10208 <sys_timer_isr+0x4c>
   101f8:	d0a0320b 	ldhu	r2,-32568(gp)
   101fc:	1004d07a 	srli	r2,r2,1
   10200:	00000106 	br	10208 <sys_timer_isr+0x4c>
   10204:	d0a0320b 	ldhu	r2,-32568(gp)
   10208:	1080ffcc 	andi	r2,r2,1023
   1020c:	18800035 	stwio	r2,0(r3)
        }
    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a03103 	ldbu	r2,-32572(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0203105 	stb	zero,-32572(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a03105 	stb	r2,-32572(gp)
   10238:	f800283a 	ret

0001023c <timer_init>:
    }
}

void timer_init(void *isr) {
   1023c:	defffe04 	addi	sp,sp,-8
   10240:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10244:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }
}

void timer_init(void *isr) {
   10248:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1024c:	84040904 	addi	r16,r16,4132
   10250:	008000c4 	movi	r2,3
   10254:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10258:	00c000b4 	movhi	r3,2
   1025c:	0005883a 	mov	r2,zero
   10260:	18c40804 	addi	r3,r3,4128
   10264:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10268:	00c000b4 	movhi	r3,2
   1026c:	18c40a04 	addi	r3,r3,4136
   10270:	01424004 	movi	r5,2304
   10274:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10278:	00c000b4 	movhi	r3,2
   1027c:	18c40b04 	addi	r3,r3,4140
   10280:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10284:	200d883a 	mov	r6,r4
   10288:	000b883a 	mov	r5,zero
   1028c:	01000044 	movi	r4,1
   10290:	001036c0 	call	1036c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10294:	008001c4 	movi	r2,7
   10298:	80800035 	stwio	r2,0(r16)
}
   1029c:	dfc00117 	ldw	ra,4(sp)
   102a0:	dc000017 	ldw	r16,0(sp)
   102a4:	dec00204 	addi	sp,sp,8
   102a8:	f800283a 	ret

000102ac <fir_x_read>:

alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
}
   102ac:	008000b4 	movhi	r2,2
   102b0:	10841404 	addi	r2,r2,4176
   102b4:	10800037 	ldwio	r2,0(r2)
   102b8:	f800283a 	ret

000102bc <fir_x_write>:

void fir_x_write(alt_32 x_val){
	IOWR(FIR_IN_X_BASE, 0, x_val);
   102bc:	008000b4 	movhi	r2,2
   102c0:	10841004 	addi	r2,r2,4160
   102c4:	11000035 	stwio	r4,0(r2)
   102c8:	f800283a 	ret

000102cc <main>:
}




int main() {
   102cc:	defffd04 	addi	sp,sp,-12
   102d0:	dc000015 	stw	r16,0(sp)
	alt_32 temp = 2;
	alt_printf("init val is: %x\n", temp);
   102d4:	01000074 	movhi	r4,1
   102d8:	04000084 	movi	r16,2
   102dc:	800b883a 	mov	r5,r16
   102e0:	21020804 	addi	r4,r4,2080
}




int main() {
   102e4:	dfc00215 	stw	ra,8(sp)
   102e8:	dc400115 	stw	r17,4(sp)
	alt_32 temp = 2;
	alt_printf("init val is: %x\n", temp);
   102ec:	001050c0 	call	1050c <alt_printf>
alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
}

void fir_x_write(alt_32 x_val){
	IOWR(FIR_IN_X_BASE, 0, x_val);
   102f0:	008000b4 	movhi	r2,2
   102f4:	10841004 	addi	r2,r2,4160
   102f8:	14000035 	stwio	r16,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
}

alt_32 fir_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(FIR_OUT_X_BASE);
   102fc:	044000b4 	movhi	r17,2
   10300:	8c441404 	addi	r17,r17,4176
   10304:	89400037 	ldwio	r5,0(r17)
int main() {
	alt_32 temp = 2;
	alt_printf("init val is: %x\n", temp);
	fir_x_write(temp);
	alt_32 res = fir_x_read();
	alt_printf("value read is: %x\n", res);
   10308:	04000074 	movhi	r16,1
   1030c:	84020d04 	addi	r16,r16,2100
   10310:	8009883a 	mov	r4,r16
   10314:	001050c0 	call	1050c <alt_printf>
	res = fir_x_read();
	alt_printf("value read is: %x\n", res);
   10318:	89400037 	ldwio	r5,0(r17)
   1031c:	8009883a 	mov	r4,r16
   10320:	001050c0 	call	1050c <alt_printf>
	res = fir_x_read();
	alt_printf("value read is: %x\n", res);
   10324:	89400037 	ldwio	r5,0(r17)
   10328:	8009883a 	mov	r4,r16
   1032c:	001050c0 	call	1050c <alt_printf>
	res = fir_x_read();
	alt_printf("value read is: %x\n", res);
   10330:	89400037 	ldwio	r5,0(r17)
   10334:	8009883a 	mov	r4,r16
   10338:	001050c0 	call	1050c <alt_printf>
	res = fir_x_read();
	alt_printf("value read is: %x\n", res);
   1033c:	89400037 	ldwio	r5,0(r17)
   10340:	8009883a 	mov	r4,r16
   10344:	001050c0 	call	1050c <alt_printf>
	res = fir_x_read();
	alt_printf("value read is: %x\n", res);
   10348:	89400037 	ldwio	r5,0(r17)
   1034c:	8009883a 	mov	r4,r16
   10350:	001050c0 	call	1050c <alt_printf>
    //         loop_timer = 0;
    //     }
    //     alt_timestamp_start();  // Restart system timer
    // }

}
   10354:	0005883a 	mov	r2,zero
   10358:	dfc00217 	ldw	ra,8(sp)
   1035c:	dc400117 	ldw	r17,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00304 	addi	sp,sp,12
   10368:	f800283a 	ret

0001036c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1036c:	008007c4 	movi	r2,31
   10370:	11002136 	bltu	r2,r4,103f8 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10374:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10378:	00ffff84 	movi	r3,-2
   1037c:	38c4703a 	and	r2,r7,r3
   10380:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10384:	200490fa 	slli	r2,r4,3
   10388:	02000074 	movhi	r8,1
   1038c:	42028a04 	addi	r8,r8,2600
   10390:	4085883a 	add	r2,r8,r2
   10394:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10398:	11400115 	stw	r5,4(r2)
   1039c:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   103a0:	30000726 	beq	r6,zero,103c0 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103a4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103a8:	28c6703a 	and	r3,r5,r3
   103ac:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   103b0:	d0e03417 	ldw	r3,-32560(gp)
   103b4:	1104983a 	sll	r2,r2,r4
   103b8:	10c4b03a 	or	r2,r2,r3
   103bc:	00000706 	br	103dc <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103c0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103c4:	28c6703a 	and	r3,r5,r3
   103c8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   103cc:	1104983a 	sll	r2,r2,r4
   103d0:	d0e03417 	ldw	r3,-32560(gp)
   103d4:	0084303a 	nor	r2,zero,r2
   103d8:	10c4703a 	and	r2,r2,r3
   103dc:	d0a03415 	stw	r2,-32560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   103e0:	d0a03417 	ldw	r2,-32560(gp)
   103e4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103e8:	2801703a 	wrctl	status,r5
   103ec:	3801703a 	wrctl	status,r7
   103f0:	0005883a 	mov	r2,zero
   103f4:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   103f8:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   103fc:	f800283a 	ret

00010400 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10400:	deffff04 	addi	sp,sp,-4
   10404:	01000074 	movhi	r4,1
   10408:	01400074 	movhi	r5,1
   1040c:	dfc00015 	stw	ra,0(sp)
   10410:	21022f04 	addi	r4,r4,2236
   10414:	29425804 	addi	r5,r5,2400

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10418:	2140061e 	bne	r4,r5,10434 <alt_load+0x34>
   1041c:	01000074 	movhi	r4,1
   10420:	01400074 	movhi	r5,1
   10424:	21000804 	addi	r4,r4,32
   10428:	29400804 	addi	r5,r5,32
   1042c:	2140121e 	bne	r4,r5,10478 <alt_load+0x78>
   10430:	00000b06 	br	10460 <alt_load+0x60>
   10434:	00c00074 	movhi	r3,1
   10438:	18c25804 	addi	r3,r3,2400
   1043c:	1907c83a 	sub	r3,r3,r4
   10440:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10444:	10fff526 	beq	r2,r3,1041c <__alt_data_end+0xffff041c>
    {
      *to++ = *from++;
   10448:	114f883a 	add	r7,r2,r5
   1044c:	39c00017 	ldw	r7,0(r7)
   10450:	110d883a 	add	r6,r2,r4
   10454:	10800104 	addi	r2,r2,4
   10458:	31c00015 	stw	r7,0(r6)
   1045c:	003ff906 	br	10444 <__alt_data_end+0xffff0444>
   10460:	01000074 	movhi	r4,1
   10464:	01400074 	movhi	r5,1
   10468:	21020804 	addi	r4,r4,2080
   1046c:	29420804 	addi	r5,r5,2080

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10470:	2140101e 	bne	r4,r5,104b4 <alt_load+0xb4>
   10474:	00000b06 	br	104a4 <alt_load+0xa4>
   10478:	00c00074 	movhi	r3,1
   1047c:	18c06004 	addi	r3,r3,384
   10480:	1907c83a 	sub	r3,r3,r4
   10484:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10488:	10fff526 	beq	r2,r3,10460 <__alt_data_end+0xffff0460>
    {
      *to++ = *from++;
   1048c:	114f883a 	add	r7,r2,r5
   10490:	39c00017 	ldw	r7,0(r7)
   10494:	110d883a 	add	r6,r2,r4
   10498:	10800104 	addi	r2,r2,4
   1049c:	31c00015 	stw	r7,0(r6)
   104a0:	003ff906 	br	10488 <__alt_data_end+0xffff0488>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   104a4:	00107280 	call	10728 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   104a8:	dfc00017 	ldw	ra,0(sp)
   104ac:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   104b0:	00107a01 	jmpi	107a0 <alt_icache_flush_all>
   104b4:	00c00074 	movhi	r3,1
   104b8:	18c22f04 	addi	r3,r3,2236
   104bc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   104c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   104c4:	18bff726 	beq	r3,r2,104a4 <__alt_data_end+0xffff04a4>
    {
      *to++ = *from++;
   104c8:	114f883a 	add	r7,r2,r5
   104cc:	39c00017 	ldw	r7,0(r7)
   104d0:	110d883a 	add	r6,r2,r4
   104d4:	10800104 	addi	r2,r2,4
   104d8:	31c00015 	stw	r7,0(r6)
   104dc:	003ff906 	br	104c4 <__alt_data_end+0xffff04c4>

000104e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104e0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104e4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104e8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104ec:	00106c40 	call	106c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104f0:	00106e40 	call	106e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104f4:	d1a03517 	ldw	r6,-32556(gp)
   104f8:	d1603617 	ldw	r5,-32552(gp)
   104fc:	d1203717 	ldw	r4,-32548(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10500:	dfc00017 	ldw	ra,0(sp)
   10504:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10508:	00102cc1 	jmpi	102cc <main>

0001050c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1050c:	defff204 	addi	sp,sp,-56
   10510:	2005883a 	mov	r2,r4
   10514:	dfc00a15 	stw	ra,40(sp)
   10518:	df000915 	stw	fp,36(sp)
   1051c:	ddc00815 	stw	r23,32(sp)
   10520:	dd800715 	stw	r22,28(sp)
   10524:	dd400615 	stw	r21,24(sp)
   10528:	dd000515 	stw	r20,20(sp)
   1052c:	dcc00415 	stw	r19,16(sp)
   10530:	dc800315 	stw	r18,12(sp)
   10534:	dc400215 	stw	r17,8(sp)
   10538:	dc000115 	stw	r16,4(sp)
   1053c:	d9400b15 	stw	r5,44(sp)
   10540:	d9800c15 	stw	r6,48(sp)
   10544:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10548:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   1054c:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   10550:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   10554:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   10558:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1055c:	11000007 	ldb	r4,0(r2)
   10560:	20003a26 	beq	r4,zero,1064c <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10564:	24000226 	beq	r4,r16,10570 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10568:	14400044 	addi	r17,r2,1
   1056c:	00001406 	br	105c0 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   10570:	14400084 	addi	r17,r2,2
   10574:	10800047 	ldb	r2,1(r2)
   10578:	10003426 	beq	r2,zero,1064c <alt_printf+0x140>
            {
                if (c == '%')
   1057c:	1400021e 	bne	r2,r16,10588 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   10580:	8009883a 	mov	r4,r16
   10584:	00000e06 	br	105c0 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   10588:	1480051e 	bne	r2,r18,105a0 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   1058c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   10590:	ad800104 	addi	r22,r21,4
   10594:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   10598:	001067c0 	call	1067c <alt_putchar>
   1059c:	00002906 	br	10644 <alt_printf+0x138>
                }
                else if (c == 'x')
   105a0:	14c0201e 	bne	r2,r19,10624 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   105a4:	adc00017 	ldw	r23,0(r21)
   105a8:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   105ac:	b8000326 	beq	r23,zero,105bc <alt_printf+0xb0>
   105b0:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   105b4:	00c003c4 	movi	r3,15
   105b8:	00000306 	br	105c8 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   105bc:	01000c04 	movi	r4,48
   105c0:	001067c0 	call	1067c <alt_putchar>
                        continue;
   105c4:	00001f06 	br	10644 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   105c8:	1d84983a 	sll	r2,r3,r22
   105cc:	15c4703a 	and	r2,r2,r23
   105d0:	1000021e 	bne	r2,zero,105dc <alt_printf+0xd0>
                        digit_shift -= 4;
   105d4:	b5bfff04 	addi	r22,r22,-4
   105d8:	003ffb06 	br	105c8 <__alt_data_end+0xffff05c8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   105dc:	070003c4 	movi	fp,15
                        if (digit <= 9)
   105e0:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   105e4:	b0001716 	blt	r22,zero,10644 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   105e8:	e588983a 	sll	r4,fp,r22
   105ec:	25c8703a 	and	r4,r4,r23
   105f0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   105f4:	19000236 	bltu	r3,r4,10600 <alt_printf+0xf4>
                            c = '0' + digit;
   105f8:	21000c04 	addi	r4,r4,48
   105fc:	00000106 	br	10604 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   10600:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   10604:	21003fcc 	andi	r4,r4,255
   10608:	2100201c 	xori	r4,r4,128
   1060c:	213fe004 	addi	r4,r4,-128
   10610:	d8c00015 	stw	r3,0(sp)
   10614:	001067c0 	call	1067c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   10618:	b5bfff04 	addi	r22,r22,-4
   1061c:	d8c00017 	ldw	r3,0(sp)
   10620:	003ff006 	br	105e4 <__alt_data_end+0xffff05e4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   10624:	1500071e 	bne	r2,r20,10644 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   10628:	ad800017 	ldw	r22,0(r21)
   1062c:	ad400104 	addi	r21,r21,4

                    while(*s)
   10630:	b1000007 	ldb	r4,0(r22)
   10634:	20000326 	beq	r4,zero,10644 <alt_printf+0x138>
                      alt_putchar(*s++);
   10638:	b5800044 	addi	r22,r22,1
   1063c:	001067c0 	call	1067c <alt_putchar>
   10640:	003ffb06 	br	10630 <__alt_data_end+0xffff0630>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   10644:	8805883a 	mov	r2,r17
   10648:	003fc406 	br	1055c <__alt_data_end+0xffff055c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1064c:	dfc00a17 	ldw	ra,40(sp)
   10650:	df000917 	ldw	fp,36(sp)
   10654:	ddc00817 	ldw	r23,32(sp)
   10658:	dd800717 	ldw	r22,28(sp)
   1065c:	dd400617 	ldw	r21,24(sp)
   10660:	dd000517 	ldw	r20,20(sp)
   10664:	dcc00417 	ldw	r19,16(sp)
   10668:	dc800317 	ldw	r18,12(sp)
   1066c:	dc400217 	ldw	r17,8(sp)
   10670:	dc000117 	ldw	r16,4(sp)
   10674:	dec00e04 	addi	sp,sp,56
   10678:	f800283a 	ret

0001067c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1067c:	defffd04 	addi	sp,sp,-12
   10680:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   10684:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10688:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1068c:	01000074 	movhi	r4,1
   10690:	000f883a 	mov	r7,zero
   10694:	01800044 	movi	r6,1
   10698:	d80b883a 	mov	r5,sp
   1069c:	21025104 	addi	r4,r4,2372
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   106a0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   106a4:	00106f40 	call	106f4 <altera_avalon_jtag_uart_write>
   106a8:	00ffffc4 	movi	r3,-1
   106ac:	10c00126 	beq	r2,r3,106b4 <alt_putchar+0x38>
        return -1;
    }
    return c;
   106b0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   106b4:	dfc00217 	ldw	ra,8(sp)
   106b8:	dc000117 	ldw	r16,4(sp)
   106bc:	dec00304 	addi	sp,sp,12
   106c0:	f800283a 	ret

000106c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   106c4:	deffff04 	addi	sp,sp,-4
   106c8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   106cc:	00107a40 	call	107a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   106d0:	00800044 	movi	r2,1
   106d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   106d8:	dfc00017 	ldw	ra,0(sp)
   106dc:	dec00104 	addi	sp,sp,4
   106e0:	f800283a 	ret

000106e4 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   106e4:	01000074 	movhi	r4,1
   106e8:	d1600304 	addi	r5,gp,-32756
   106ec:	21022f04 	addi	r4,r4,2236
   106f0:	00107341 	jmpi	10734 <alt_dev_llist_insert>

000106f4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   106f4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   106f8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   106fc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10700:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10704:	2980072e 	bgeu	r5,r6,10724 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10708:	38c00037 	ldwio	r3,0(r7)
   1070c:	18ffffec 	andhi	r3,r3,65535
   10710:	183ffc26 	beq	r3,zero,10704 <__alt_data_end+0xffff0704>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10714:	28c00007 	ldb	r3,0(r5)
   10718:	20c00035 	stwio	r3,0(r4)
   1071c:	29400044 	addi	r5,r5,1
   10720:	003ff806 	br	10704 <__alt_data_end+0xffff0704>

  return count;
}
   10724:	f800283a 	ret

00010728 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10728:	f800283a 	ret

0001072c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   1072c:	3005883a 	mov	r2,r6
   10730:	f800283a 	ret

00010734 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10734:	20000226 	beq	r4,zero,10740 <alt_dev_llist_insert+0xc>
   10738:	20800217 	ldw	r2,8(r4)
   1073c:	1000101e 	bne	r2,zero,10780 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10740:	d0a00717 	ldw	r2,-32740(gp)
   10744:	10000926 	beq	r2,zero,1076c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10748:	deffff04 	addi	sp,sp,-4
   1074c:	dfc00015 	stw	ra,0(sp)
   10750:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10754:	00c00584 	movi	r3,22
   10758:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1075c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10760:	dfc00017 	ldw	ra,0(sp)
   10764:	dec00104 	addi	sp,sp,4
   10768:	f800283a 	ret
   1076c:	d0a03904 	addi	r2,gp,-32540
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10770:	00c00584 	movi	r3,22
   10774:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10778:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1077c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10780:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10784:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10788:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   1078c:	28800017 	ldw	r2,0(r5)
   10790:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10794:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10798:	0005883a 	mov	r2,zero
   1079c:	f800283a 	ret

000107a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   107a0:	f800283a 	ret

000107a4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   107a4:	000170fa 	wrctl	ienable,zero
   107a8:	f800283a 	ret

000107ac <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   107ac:	213ffe84 	addi	r4,r4,-6
   107b0:	008003c4 	movi	r2,15
   107b4:	11001636 	bltu	r2,r4,10810 <alt_exception_cause_generated_bad_addr+0x64>
   107b8:	200890ba 	slli	r4,r4,2
   107bc:	00800074 	movhi	r2,1
   107c0:	1081f404 	addi	r2,r2,2000
   107c4:	2089883a 	add	r4,r4,r2
   107c8:	20800017 	ldw	r2,0(r4)
   107cc:	1000683a 	jmp	r2
   107d0:	00010818 	cmpnei	zero,zero,1056
   107d4:	00010818 	cmpnei	zero,zero,1056
   107d8:	00010810 	cmplti	zero,zero,1056
   107dc:	00010810 	cmplti	zero,zero,1056
   107e0:	00010810 	cmplti	zero,zero,1056
   107e4:	00010818 	cmpnei	zero,zero,1056
   107e8:	00010810 	cmplti	zero,zero,1056
   107ec:	00010810 	cmplti	zero,zero,1056
   107f0:	00010818 	cmpnei	zero,zero,1056
   107f4:	00010818 	cmpnei	zero,zero,1056
   107f8:	00010810 	cmplti	zero,zero,1056
   107fc:	00010818 	cmpnei	zero,zero,1056
   10800:	00010810 	cmplti	zero,zero,1056
   10804:	00010810 	cmplti	zero,zero,1056
   10808:	00010810 	cmplti	zero,zero,1056
   1080c:	00010818 	cmpnei	zero,zero,1056
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10810:	0005883a 	mov	r2,zero
   10814:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10818:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   1081c:	f800283a 	ret
