// nios_accelerometer_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios_accelerometer_mm_interconnect_0 (
		input  wire        clk_clk_clk,                                                       //                                               clk_clk.clk
		input  wire        cpu_reset_reset_bridge_in_reset_reset,                             //                       cpu_reset_reset_bridge_in_reset.reset
		input  wire [17:0] cpu_data_master_address,                                           //                                       cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                                       //                                                      .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                        //                                                      .byteenable
		input  wire        cpu_data_master_read,                                              //                                                      .read
		output wire [31:0] cpu_data_master_readdata,                                          //                                                      .readdata
		input  wire        cpu_data_master_write,                                             //                                                      .write
		input  wire [31:0] cpu_data_master_writedata,                                         //                                                      .writedata
		input  wire        cpu_data_master_debugaccess,                                       //                                                      .debugaccess
		input  wire [17:0] cpu_instruction_master_address,                                    //                                cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                                //                                                      .waitrequest
		input  wire        cpu_instruction_master_read,                                       //                                                      .read
		output wire [31:0] cpu_instruction_master_readdata,                                   //                                                      .readdata
		output wire [0:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_address,     // accelerometer_spi_avalon_accelerometer_spi_mode_slave.address
		output wire        accelerometer_spi_avalon_accelerometer_spi_mode_slave_write,       //                                                      .write
		output wire        accelerometer_spi_avalon_accelerometer_spi_mode_slave_read,        //                                                      .read
		input  wire [7:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_readdata,    //                                                      .readdata
		output wire [7:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_writedata,   //                                                      .writedata
		output wire [0:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_byteenable,  //                                                      .byteenable
		input  wire        accelerometer_spi_avalon_accelerometer_spi_mode_slave_waitrequest, //                                                      .waitrequest
		output wire [8:0]  cpu_debug_mem_slave_address,                                       //                                   cpu_debug_mem_slave.address
		output wire        cpu_debug_mem_slave_write,                                         //                                                      .write
		output wire        cpu_debug_mem_slave_read,                                          //                                                      .read
		input  wire [31:0] cpu_debug_mem_slave_readdata,                                      //                                                      .readdata
		output wire [31:0] cpu_debug_mem_slave_writedata,                                     //                                                      .writedata
		output wire [3:0]  cpu_debug_mem_slave_byteenable,                                    //                                                      .byteenable
		input  wire        cpu_debug_mem_slave_waitrequest,                                   //                                                      .waitrequest
		output wire        cpu_debug_mem_slave_debugaccess,                                   //                                                      .debugaccess
		output wire [1:0]  fir_in_x_s1_address,                                               //                                           fir_in_x_s1.address
		output wire        fir_in_x_s1_write,                                                 //                                                      .write
		input  wire [31:0] fir_in_x_s1_readdata,                                              //                                                      .readdata
		output wire [31:0] fir_in_x_s1_writedata,                                             //                                                      .writedata
		output wire        fir_in_x_s1_chipselect,                                            //                                                      .chipselect
		output wire [1:0]  fir_out_x_s1_address,                                              //                                          fir_out_x_s1.address
		input  wire [31:0] fir_out_x_s1_readdata,                                             //                                                      .readdata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                               //                           jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                 //                                                      .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                  //                                                      .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                              //                                                      .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                             //                                                      .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                           //                                                      .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                            //                                                      .chipselect
		output wire [1:0]  led_s1_address,                                                    //                                                led_s1.address
		output wire        led_s1_write,                                                      //                                                      .write
		input  wire [31:0] led_s1_readdata,                                                   //                                                      .readdata
		output wire [31:0] led_s1_writedata,                                                  //                                                      .writedata
		output wire        led_s1_chipselect,                                                 //                                                      .chipselect
		output wire [13:0] onchip_memory_s1_address,                                          //                                      onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                                            //                                                      .write
		input  wire [31:0] onchip_memory_s1_readdata,                                         //                                                      .readdata
		output wire [31:0] onchip_memory_s1_writedata,                                        //                                                      .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                                       //                                                      .byteenable
		output wire        onchip_memory_s1_chipselect,                                       //                                                      .chipselect
		output wire        onchip_memory_s1_clken,                                            //                                                      .clken
		output wire [1:0]  sample_tick_s1_address,                                            //                                        sample_tick_s1.address
		output wire        sample_tick_s1_write,                                              //                                                      .write
		input  wire [31:0] sample_tick_s1_readdata,                                           //                                                      .readdata
		output wire [31:0] sample_tick_s1_writedata,                                          //                                                      .writedata
		output wire        sample_tick_s1_chipselect,                                         //                                                      .chipselect
		output wire [2:0]  timer_s1_address,                                                  //                                              timer_s1.address
		output wire        timer_s1_write,                                                    //                                                      .write
		input  wire [15:0] timer_s1_readdata,                                                 //                                                      .readdata
		output wire [15:0] timer_s1_writedata,                                                //                                                      .writedata
		output wire        timer_s1_chipselect,                                               //                                                      .chipselect
		output wire [2:0]  timer_0_s1_address,                                                //                                            timer_0_s1.address
		output wire        timer_0_s1_write,                                                  //                                                      .write
		input  wire [15:0] timer_0_s1_readdata,                                               //                                                      .readdata
		output wire [15:0] timer_0_s1_writedata,                                              //                                                      .writedata
		output wire        timer_0_s1_chipselect                                              //                                                      .chipselect
	);

	wire         cpu_data_master_translator_avalon_universal_master_0_waitrequest;                          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire         cpu_data_master_translator_avalon_universal_master_0_debugaccess;                          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire  [17:0] cpu_data_master_translator_avalon_universal_master_0_address;                              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire         cpu_data_master_translator_avalon_universal_master_0_read;                                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire   [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire         cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire         cpu_data_master_translator_avalon_universal_master_0_lock;                                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire         cpu_data_master_translator_avalon_universal_master_0_write;                                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire   [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                         // rsp_mux:src_valid -> cpu_data_master_agent:rp_valid
	wire  [95:0] rsp_mux_src_data;                                                                          // rsp_mux:src_data -> cpu_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                         // cpu_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [9:0] rsp_mux_src_channel;                                                                       // rsp_mux:src_channel -> cpu_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                                 // rsp_mux:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                                   // rsp_mux:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire         cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire         cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire  [17:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire         cpu_instruction_master_translator_avalon_universal_master_0_read;                          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire   [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire         cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                 // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire         cpu_instruction_master_translator_avalon_universal_master_0_lock;                          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire         cpu_instruction_master_translator_avalon_universal_master_0_write;                         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire   [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                                     // rsp_mux_001:src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [95:0] rsp_mux_001_src_data;                                                                      // rsp_mux_001:src_data -> cpu_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                                     // cpu_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [9:0] rsp_mux_001_src_channel;                                                                   // rsp_mux_001:src_channel -> cpu_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                             // rsp_mux_001:src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                               // rsp_mux_001:src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire   [7:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdata;                   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_readdata -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_readdata
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_waitrequest;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_waitrequest -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_waitrequest
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_debugaccess;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_debugaccess -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_debugaccess
	wire  [17:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_address;                    // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_address -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_address
	wire   [0:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_byteenable;                 // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_byteenable -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_byteenable
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_read;                       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_read -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_read
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdatavalid;              // accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_readdatavalid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_readdatavalid
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_lock;                       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_lock -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_lock
	wire   [7:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_writedata;                  // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_writedata -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_writedata
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_write;                      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_write -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_write
	wire   [0:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_burstcount;                 // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_burstcount -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_burstcount
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_valid;               // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_valid
	wire  [69:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_data;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_ready;               // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_ready
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_startofpacket;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_startofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_endofpacket;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_endofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_valid;            // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_valid
	wire  [69:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_data;             // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_ready;            // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_ready
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_startofpacket;    // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_startofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_endofpacket;      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_endofpacket
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                             // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                          // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                          // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire  [17:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                              // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                           // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                                                 // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                        // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                 // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                            // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                                                // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                           // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                         // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [96:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                          // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [96:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                      // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                                     // cmd_mux_001:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [95:0] cmd_mux_001_src_data;                                                                      // cmd_mux_001:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                                     // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [9:0] cmd_mux_001_src_channel;                                                                   // cmd_mux_001:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                             // cmd_mux_001:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                               // cmd_mux_001:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                                     // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire         cpu_debug_mem_slave_agent_m0_waitrequest;                                                  // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire         cpu_debug_mem_slave_agent_m0_debugaccess;                                                  // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire  [17:0] cpu_debug_mem_slave_agent_m0_address;                                                      // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire   [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                                   // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire         cpu_debug_mem_slave_agent_m0_read;                                                         // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire         cpu_debug_mem_slave_agent_m0_readdatavalid;                                                // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire         cpu_debug_mem_slave_agent_m0_lock;                                                         // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire  [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                                    // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire         cpu_debug_mem_slave_agent_m0_write;                                                        // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire   [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                                   // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire         cpu_debug_mem_slave_agent_rf_source_valid;                                                 // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [96:0] cpu_debug_mem_slave_agent_rf_source_data;                                                  // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire         cpu_debug_mem_slave_agent_rf_source_ready;                                                 // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire         cpu_debug_mem_slave_agent_rf_source_startofpacket;                                         // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         cpu_debug_mem_slave_agent_rf_source_endofpacket;                                           // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                              // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [96:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                               // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire         cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                              // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                      // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire         cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                        // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                                     // cmd_mux_002:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [95:0] cmd_mux_002_src_data;                                                                      // cmd_mux_002:src_data -> cpu_debug_mem_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                                     // cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [9:0] cmd_mux_002_src_channel;                                                                   // cmd_mux_002:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                             // cmd_mux_002:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                               // cmd_mux_002:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] onchip_memory_s1_agent_m0_readdata;                                                        // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire         onchip_memory_s1_agent_m0_waitrequest;                                                     // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire         onchip_memory_s1_agent_m0_debugaccess;                                                     // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire  [17:0] onchip_memory_s1_agent_m0_address;                                                         // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire   [3:0] onchip_memory_s1_agent_m0_byteenable;                                                      // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire         onchip_memory_s1_agent_m0_read;                                                            // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire         onchip_memory_s1_agent_m0_readdatavalid;                                                   // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire         onchip_memory_s1_agent_m0_lock;                                                            // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire  [31:0] onchip_memory_s1_agent_m0_writedata;                                                       // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire         onchip_memory_s1_agent_m0_write;                                                           // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire   [2:0] onchip_memory_s1_agent_m0_burstcount;                                                      // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire         onchip_memory_s1_agent_rf_source_valid;                                                    // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [96:0] onchip_memory_s1_agent_rf_source_data;                                                     // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire         onchip_memory_s1_agent_rf_source_ready;                                                    // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire         onchip_memory_s1_agent_rf_source_startofpacket;                                            // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory_s1_agent_rf_source_endofpacket;                                              // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_valid;                                                 // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [96:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                                  // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire         onchip_memory_s1_agent_rsp_fifo_out_ready;                                                 // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                         // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                           // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                                     // cmd_mux_003:src_valid -> onchip_memory_s1_agent:cp_valid
	wire  [95:0] cmd_mux_003_src_data;                                                                      // cmd_mux_003:src_data -> onchip_memory_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                                     // onchip_memory_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [9:0] cmd_mux_003_src_channel;                                                                   // cmd_mux_003:src_channel -> onchip_memory_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                             // cmd_mux_003:src_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                               // cmd_mux_003:src_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire  [31:0] led_s1_agent_m0_readdata;                                                                  // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire         led_s1_agent_m0_waitrequest;                                                               // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire         led_s1_agent_m0_debugaccess;                                                               // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire  [17:0] led_s1_agent_m0_address;                                                                   // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire   [3:0] led_s1_agent_m0_byteenable;                                                                // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire         led_s1_agent_m0_read;                                                                      // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire         led_s1_agent_m0_readdatavalid;                                                             // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire         led_s1_agent_m0_lock;                                                                      // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire  [31:0] led_s1_agent_m0_writedata;                                                                 // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire         led_s1_agent_m0_write;                                                                     // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire   [2:0] led_s1_agent_m0_burstcount;                                                                // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire         led_s1_agent_rf_source_valid;                                                              // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [96:0] led_s1_agent_rf_source_data;                                                               // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire         led_s1_agent_rf_source_ready;                                                              // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire         led_s1_agent_rf_source_startofpacket;                                                      // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire         led_s1_agent_rf_source_endofpacket;                                                        // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire         led_s1_agent_rsp_fifo_out_valid;                                                           // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [96:0] led_s1_agent_rsp_fifo_out_data;                                                            // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire         led_s1_agent_rsp_fifo_out_ready;                                                           // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire         led_s1_agent_rsp_fifo_out_startofpacket;                                                   // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire         led_s1_agent_rsp_fifo_out_endofpacket;                                                     // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                                     // cmd_mux_004:src_valid -> led_s1_agent:cp_valid
	wire  [95:0] cmd_mux_004_src_data;                                                                      // cmd_mux_004:src_data -> led_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                                     // led_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [9:0] cmd_mux_004_src_channel;                                                                   // cmd_mux_004:src_channel -> led_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                             // cmd_mux_004:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                               // cmd_mux_004:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire  [31:0] timer_s1_agent_m0_readdata;                                                                // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire         timer_s1_agent_m0_waitrequest;                                                             // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire         timer_s1_agent_m0_debugaccess;                                                             // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire  [17:0] timer_s1_agent_m0_address;                                                                 // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire   [3:0] timer_s1_agent_m0_byteenable;                                                              // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire         timer_s1_agent_m0_read;                                                                    // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire         timer_s1_agent_m0_readdatavalid;                                                           // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire         timer_s1_agent_m0_lock;                                                                    // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire  [31:0] timer_s1_agent_m0_writedata;                                                               // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire         timer_s1_agent_m0_write;                                                                   // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire   [2:0] timer_s1_agent_m0_burstcount;                                                              // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire         timer_s1_agent_rf_source_valid;                                                            // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [96:0] timer_s1_agent_rf_source_data;                                                             // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire         timer_s1_agent_rf_source_ready;                                                            // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire         timer_s1_agent_rf_source_startofpacket;                                                    // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_s1_agent_rf_source_endofpacket;                                                      // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_s1_agent_rsp_fifo_out_valid;                                                         // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [96:0] timer_s1_agent_rsp_fifo_out_data;                                                          // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire         timer_s1_agent_rsp_fifo_out_ready;                                                         // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire         timer_s1_agent_rsp_fifo_out_startofpacket;                                                 // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire         timer_s1_agent_rsp_fifo_out_endofpacket;                                                   // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                                     // cmd_mux_005:src_valid -> timer_s1_agent:cp_valid
	wire  [95:0] cmd_mux_005_src_data;                                                                      // cmd_mux_005:src_data -> timer_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                                     // timer_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [9:0] cmd_mux_005_src_channel;                                                                   // cmd_mux_005:src_channel -> timer_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                             // cmd_mux_005:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                               // cmd_mux_005:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire  [31:0] timer_0_s1_agent_m0_readdata;                                                              // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire         timer_0_s1_agent_m0_waitrequest;                                                           // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire         timer_0_s1_agent_m0_debugaccess;                                                           // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire  [17:0] timer_0_s1_agent_m0_address;                                                               // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire   [3:0] timer_0_s1_agent_m0_byteenable;                                                            // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire         timer_0_s1_agent_m0_read;                                                                  // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire         timer_0_s1_agent_m0_readdatavalid;                                                         // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire         timer_0_s1_agent_m0_lock;                                                                  // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire  [31:0] timer_0_s1_agent_m0_writedata;                                                             // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire         timer_0_s1_agent_m0_write;                                                                 // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire   [2:0] timer_0_s1_agent_m0_burstcount;                                                            // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire         timer_0_s1_agent_rf_source_valid;                                                          // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [96:0] timer_0_s1_agent_rf_source_data;                                                           // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire         timer_0_s1_agent_rf_source_ready;                                                          // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire         timer_0_s1_agent_rf_source_startofpacket;                                                  // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_0_s1_agent_rf_source_endofpacket;                                                    // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_valid;                                                       // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [96:0] timer_0_s1_agent_rsp_fifo_out_data;                                                        // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire         timer_0_s1_agent_rsp_fifo_out_ready;                                                       // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire         timer_0_s1_agent_rsp_fifo_out_startofpacket;                                               // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_endofpacket;                                                 // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                                     // cmd_mux_006:src_valid -> timer_0_s1_agent:cp_valid
	wire  [95:0] cmd_mux_006_src_data;                                                                      // cmd_mux_006:src_data -> timer_0_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                                     // timer_0_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [9:0] cmd_mux_006_src_channel;                                                                   // cmd_mux_006:src_channel -> timer_0_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                             // cmd_mux_006:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                               // cmd_mux_006:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire  [31:0] fir_out_x_s1_agent_m0_readdata;                                                            // fir_out_x_s1_translator:uav_readdata -> fir_out_x_s1_agent:m0_readdata
	wire         fir_out_x_s1_agent_m0_waitrequest;                                                         // fir_out_x_s1_translator:uav_waitrequest -> fir_out_x_s1_agent:m0_waitrequest
	wire         fir_out_x_s1_agent_m0_debugaccess;                                                         // fir_out_x_s1_agent:m0_debugaccess -> fir_out_x_s1_translator:uav_debugaccess
	wire  [17:0] fir_out_x_s1_agent_m0_address;                                                             // fir_out_x_s1_agent:m0_address -> fir_out_x_s1_translator:uav_address
	wire   [3:0] fir_out_x_s1_agent_m0_byteenable;                                                          // fir_out_x_s1_agent:m0_byteenable -> fir_out_x_s1_translator:uav_byteenable
	wire         fir_out_x_s1_agent_m0_read;                                                                // fir_out_x_s1_agent:m0_read -> fir_out_x_s1_translator:uav_read
	wire         fir_out_x_s1_agent_m0_readdatavalid;                                                       // fir_out_x_s1_translator:uav_readdatavalid -> fir_out_x_s1_agent:m0_readdatavalid
	wire         fir_out_x_s1_agent_m0_lock;                                                                // fir_out_x_s1_agent:m0_lock -> fir_out_x_s1_translator:uav_lock
	wire  [31:0] fir_out_x_s1_agent_m0_writedata;                                                           // fir_out_x_s1_agent:m0_writedata -> fir_out_x_s1_translator:uav_writedata
	wire         fir_out_x_s1_agent_m0_write;                                                               // fir_out_x_s1_agent:m0_write -> fir_out_x_s1_translator:uav_write
	wire   [2:0] fir_out_x_s1_agent_m0_burstcount;                                                          // fir_out_x_s1_agent:m0_burstcount -> fir_out_x_s1_translator:uav_burstcount
	wire         fir_out_x_s1_agent_rf_source_valid;                                                        // fir_out_x_s1_agent:rf_source_valid -> fir_out_x_s1_agent_rsp_fifo:in_valid
	wire  [96:0] fir_out_x_s1_agent_rf_source_data;                                                         // fir_out_x_s1_agent:rf_source_data -> fir_out_x_s1_agent_rsp_fifo:in_data
	wire         fir_out_x_s1_agent_rf_source_ready;                                                        // fir_out_x_s1_agent_rsp_fifo:in_ready -> fir_out_x_s1_agent:rf_source_ready
	wire         fir_out_x_s1_agent_rf_source_startofpacket;                                                // fir_out_x_s1_agent:rf_source_startofpacket -> fir_out_x_s1_agent_rsp_fifo:in_startofpacket
	wire         fir_out_x_s1_agent_rf_source_endofpacket;                                                  // fir_out_x_s1_agent:rf_source_endofpacket -> fir_out_x_s1_agent_rsp_fifo:in_endofpacket
	wire         fir_out_x_s1_agent_rsp_fifo_out_valid;                                                     // fir_out_x_s1_agent_rsp_fifo:out_valid -> fir_out_x_s1_agent:rf_sink_valid
	wire  [96:0] fir_out_x_s1_agent_rsp_fifo_out_data;                                                      // fir_out_x_s1_agent_rsp_fifo:out_data -> fir_out_x_s1_agent:rf_sink_data
	wire         fir_out_x_s1_agent_rsp_fifo_out_ready;                                                     // fir_out_x_s1_agent:rf_sink_ready -> fir_out_x_s1_agent_rsp_fifo:out_ready
	wire         fir_out_x_s1_agent_rsp_fifo_out_startofpacket;                                             // fir_out_x_s1_agent_rsp_fifo:out_startofpacket -> fir_out_x_s1_agent:rf_sink_startofpacket
	wire         fir_out_x_s1_agent_rsp_fifo_out_endofpacket;                                               // fir_out_x_s1_agent_rsp_fifo:out_endofpacket -> fir_out_x_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                                     // cmd_mux_007:src_valid -> fir_out_x_s1_agent:cp_valid
	wire  [95:0] cmd_mux_007_src_data;                                                                      // cmd_mux_007:src_data -> fir_out_x_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                                     // fir_out_x_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [9:0] cmd_mux_007_src_channel;                                                                   // cmd_mux_007:src_channel -> fir_out_x_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                             // cmd_mux_007:src_startofpacket -> fir_out_x_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                               // cmd_mux_007:src_endofpacket -> fir_out_x_s1_agent:cp_endofpacket
	wire  [31:0] fir_in_x_s1_agent_m0_readdata;                                                             // fir_in_x_s1_translator:uav_readdata -> fir_in_x_s1_agent:m0_readdata
	wire         fir_in_x_s1_agent_m0_waitrequest;                                                          // fir_in_x_s1_translator:uav_waitrequest -> fir_in_x_s1_agent:m0_waitrequest
	wire         fir_in_x_s1_agent_m0_debugaccess;                                                          // fir_in_x_s1_agent:m0_debugaccess -> fir_in_x_s1_translator:uav_debugaccess
	wire  [17:0] fir_in_x_s1_agent_m0_address;                                                              // fir_in_x_s1_agent:m0_address -> fir_in_x_s1_translator:uav_address
	wire   [3:0] fir_in_x_s1_agent_m0_byteenable;                                                           // fir_in_x_s1_agent:m0_byteenable -> fir_in_x_s1_translator:uav_byteenable
	wire         fir_in_x_s1_agent_m0_read;                                                                 // fir_in_x_s1_agent:m0_read -> fir_in_x_s1_translator:uav_read
	wire         fir_in_x_s1_agent_m0_readdatavalid;                                                        // fir_in_x_s1_translator:uav_readdatavalid -> fir_in_x_s1_agent:m0_readdatavalid
	wire         fir_in_x_s1_agent_m0_lock;                                                                 // fir_in_x_s1_agent:m0_lock -> fir_in_x_s1_translator:uav_lock
	wire  [31:0] fir_in_x_s1_agent_m0_writedata;                                                            // fir_in_x_s1_agent:m0_writedata -> fir_in_x_s1_translator:uav_writedata
	wire         fir_in_x_s1_agent_m0_write;                                                                // fir_in_x_s1_agent:m0_write -> fir_in_x_s1_translator:uav_write
	wire   [2:0] fir_in_x_s1_agent_m0_burstcount;                                                           // fir_in_x_s1_agent:m0_burstcount -> fir_in_x_s1_translator:uav_burstcount
	wire         fir_in_x_s1_agent_rf_source_valid;                                                         // fir_in_x_s1_agent:rf_source_valid -> fir_in_x_s1_agent_rsp_fifo:in_valid
	wire  [96:0] fir_in_x_s1_agent_rf_source_data;                                                          // fir_in_x_s1_agent:rf_source_data -> fir_in_x_s1_agent_rsp_fifo:in_data
	wire         fir_in_x_s1_agent_rf_source_ready;                                                         // fir_in_x_s1_agent_rsp_fifo:in_ready -> fir_in_x_s1_agent:rf_source_ready
	wire         fir_in_x_s1_agent_rf_source_startofpacket;                                                 // fir_in_x_s1_agent:rf_source_startofpacket -> fir_in_x_s1_agent_rsp_fifo:in_startofpacket
	wire         fir_in_x_s1_agent_rf_source_endofpacket;                                                   // fir_in_x_s1_agent:rf_source_endofpacket -> fir_in_x_s1_agent_rsp_fifo:in_endofpacket
	wire         fir_in_x_s1_agent_rsp_fifo_out_valid;                                                      // fir_in_x_s1_agent_rsp_fifo:out_valid -> fir_in_x_s1_agent:rf_sink_valid
	wire  [96:0] fir_in_x_s1_agent_rsp_fifo_out_data;                                                       // fir_in_x_s1_agent_rsp_fifo:out_data -> fir_in_x_s1_agent:rf_sink_data
	wire         fir_in_x_s1_agent_rsp_fifo_out_ready;                                                      // fir_in_x_s1_agent:rf_sink_ready -> fir_in_x_s1_agent_rsp_fifo:out_ready
	wire         fir_in_x_s1_agent_rsp_fifo_out_startofpacket;                                              // fir_in_x_s1_agent_rsp_fifo:out_startofpacket -> fir_in_x_s1_agent:rf_sink_startofpacket
	wire         fir_in_x_s1_agent_rsp_fifo_out_endofpacket;                                                // fir_in_x_s1_agent_rsp_fifo:out_endofpacket -> fir_in_x_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                                     // cmd_mux_008:src_valid -> fir_in_x_s1_agent:cp_valid
	wire  [95:0] cmd_mux_008_src_data;                                                                      // cmd_mux_008:src_data -> fir_in_x_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                                     // fir_in_x_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [9:0] cmd_mux_008_src_channel;                                                                   // cmd_mux_008:src_channel -> fir_in_x_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                             // cmd_mux_008:src_startofpacket -> fir_in_x_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                               // cmd_mux_008:src_endofpacket -> fir_in_x_s1_agent:cp_endofpacket
	wire  [31:0] sample_tick_s1_agent_m0_readdata;                                                          // sample_tick_s1_translator:uav_readdata -> sample_tick_s1_agent:m0_readdata
	wire         sample_tick_s1_agent_m0_waitrequest;                                                       // sample_tick_s1_translator:uav_waitrequest -> sample_tick_s1_agent:m0_waitrequest
	wire         sample_tick_s1_agent_m0_debugaccess;                                                       // sample_tick_s1_agent:m0_debugaccess -> sample_tick_s1_translator:uav_debugaccess
	wire  [17:0] sample_tick_s1_agent_m0_address;                                                           // sample_tick_s1_agent:m0_address -> sample_tick_s1_translator:uav_address
	wire   [3:0] sample_tick_s1_agent_m0_byteenable;                                                        // sample_tick_s1_agent:m0_byteenable -> sample_tick_s1_translator:uav_byteenable
	wire         sample_tick_s1_agent_m0_read;                                                              // sample_tick_s1_agent:m0_read -> sample_tick_s1_translator:uav_read
	wire         sample_tick_s1_agent_m0_readdatavalid;                                                     // sample_tick_s1_translator:uav_readdatavalid -> sample_tick_s1_agent:m0_readdatavalid
	wire         sample_tick_s1_agent_m0_lock;                                                              // sample_tick_s1_agent:m0_lock -> sample_tick_s1_translator:uav_lock
	wire  [31:0] sample_tick_s1_agent_m0_writedata;                                                         // sample_tick_s1_agent:m0_writedata -> sample_tick_s1_translator:uav_writedata
	wire         sample_tick_s1_agent_m0_write;                                                             // sample_tick_s1_agent:m0_write -> sample_tick_s1_translator:uav_write
	wire   [2:0] sample_tick_s1_agent_m0_burstcount;                                                        // sample_tick_s1_agent:m0_burstcount -> sample_tick_s1_translator:uav_burstcount
	wire         sample_tick_s1_agent_rf_source_valid;                                                      // sample_tick_s1_agent:rf_source_valid -> sample_tick_s1_agent_rsp_fifo:in_valid
	wire  [96:0] sample_tick_s1_agent_rf_source_data;                                                       // sample_tick_s1_agent:rf_source_data -> sample_tick_s1_agent_rsp_fifo:in_data
	wire         sample_tick_s1_agent_rf_source_ready;                                                      // sample_tick_s1_agent_rsp_fifo:in_ready -> sample_tick_s1_agent:rf_source_ready
	wire         sample_tick_s1_agent_rf_source_startofpacket;                                              // sample_tick_s1_agent:rf_source_startofpacket -> sample_tick_s1_agent_rsp_fifo:in_startofpacket
	wire         sample_tick_s1_agent_rf_source_endofpacket;                                                // sample_tick_s1_agent:rf_source_endofpacket -> sample_tick_s1_agent_rsp_fifo:in_endofpacket
	wire         sample_tick_s1_agent_rsp_fifo_out_valid;                                                   // sample_tick_s1_agent_rsp_fifo:out_valid -> sample_tick_s1_agent:rf_sink_valid
	wire  [96:0] sample_tick_s1_agent_rsp_fifo_out_data;                                                    // sample_tick_s1_agent_rsp_fifo:out_data -> sample_tick_s1_agent:rf_sink_data
	wire         sample_tick_s1_agent_rsp_fifo_out_ready;                                                   // sample_tick_s1_agent:rf_sink_ready -> sample_tick_s1_agent_rsp_fifo:out_ready
	wire         sample_tick_s1_agent_rsp_fifo_out_startofpacket;                                           // sample_tick_s1_agent_rsp_fifo:out_startofpacket -> sample_tick_s1_agent:rf_sink_startofpacket
	wire         sample_tick_s1_agent_rsp_fifo_out_endofpacket;                                             // sample_tick_s1_agent_rsp_fifo:out_endofpacket -> sample_tick_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                                     // cmd_mux_009:src_valid -> sample_tick_s1_agent:cp_valid
	wire  [95:0] cmd_mux_009_src_data;                                                                      // cmd_mux_009:src_data -> sample_tick_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                                     // sample_tick_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [9:0] cmd_mux_009_src_channel;                                                                   // cmd_mux_009:src_channel -> sample_tick_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                             // cmd_mux_009:src_startofpacket -> sample_tick_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                               // cmd_mux_009:src_endofpacket -> sample_tick_s1_agent:cp_endofpacket
	wire         cpu_data_master_agent_cp_valid;                                                            // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [95:0] cpu_data_master_agent_cp_data;                                                             // cpu_data_master_agent:cp_data -> router:sink_data
	wire         cpu_data_master_agent_cp_ready;                                                            // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire         cpu_data_master_agent_cp_startofpacket;                                                    // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         cpu_data_master_agent_cp_endofpacket;                                                      // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [95:0] router_src_data;                                                                           // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                          // cmd_demux:sink_ready -> router:src_ready
	wire   [9:0] router_src_channel;                                                                        // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         cpu_instruction_master_agent_cp_valid;                                                     // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [95:0] cpu_instruction_master_agent_cp_data;                                                      // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire         cpu_instruction_master_agent_cp_ready;                                                     // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire         cpu_instruction_master_agent_cp_startofpacket;                                             // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         cpu_instruction_master_agent_cp_endofpacket;                                               // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [95:0] router_001_src_data;                                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [9:0] router_001_src_channel;                                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_valid;                      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_valid -> router_002:sink_valid
	wire  [68:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_data;                       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_data -> router_002:sink_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_ready;                      // router_002:sink_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_ready
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_startofpacket;              // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_endofpacket;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_003:sink_valid
	wire  [95:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                 // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_003:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                // router_003:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                        // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                          // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                                      // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [95:0] router_003_src_data;                                                                       // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                                      // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [9:0] router_003_src_channel;                                                                    // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                              // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                                // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         cpu_debug_mem_slave_agent_rp_valid;                                                        // cpu_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [95:0] cpu_debug_mem_slave_agent_rp_data;                                                         // cpu_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire         cpu_debug_mem_slave_agent_rp_ready;                                                        // router_004:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire         cpu_debug_mem_slave_agent_rp_startofpacket;                                                // cpu_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         cpu_debug_mem_slave_agent_rp_endofpacket;                                                  // cpu_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [95:0] router_004_src_data;                                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [9:0] router_004_src_channel;                                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         onchip_memory_s1_agent_rp_valid;                                                           // onchip_memory_s1_agent:rp_valid -> router_005:sink_valid
	wire  [95:0] onchip_memory_s1_agent_rp_data;                                                            // onchip_memory_s1_agent:rp_data -> router_005:sink_data
	wire         onchip_memory_s1_agent_rp_ready;                                                           // router_005:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire         onchip_memory_s1_agent_rp_startofpacket;                                                   // onchip_memory_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         onchip_memory_s1_agent_rp_endofpacket;                                                     // onchip_memory_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [95:0] router_005_src_data;                                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [9:0] router_005_src_channel;                                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         led_s1_agent_rp_valid;                                                                     // led_s1_agent:rp_valid -> router_006:sink_valid
	wire  [95:0] led_s1_agent_rp_data;                                                                      // led_s1_agent:rp_data -> router_006:sink_data
	wire         led_s1_agent_rp_ready;                                                                     // router_006:sink_ready -> led_s1_agent:rp_ready
	wire         led_s1_agent_rp_startofpacket;                                                             // led_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         led_s1_agent_rp_endofpacket;                                                               // led_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [95:0] router_006_src_data;                                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [9:0] router_006_src_channel;                                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         timer_s1_agent_rp_valid;                                                                   // timer_s1_agent:rp_valid -> router_007:sink_valid
	wire  [95:0] timer_s1_agent_rp_data;                                                                    // timer_s1_agent:rp_data -> router_007:sink_data
	wire         timer_s1_agent_rp_ready;                                                                   // router_007:sink_ready -> timer_s1_agent:rp_ready
	wire         timer_s1_agent_rp_startofpacket;                                                           // timer_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         timer_s1_agent_rp_endofpacket;                                                             // timer_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                                      // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [95:0] router_007_src_data;                                                                       // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                                      // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [9:0] router_007_src_channel;                                                                    // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                              // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                                // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         timer_0_s1_agent_rp_valid;                                                                 // timer_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [95:0] timer_0_s1_agent_rp_data;                                                                  // timer_0_s1_agent:rp_data -> router_008:sink_data
	wire         timer_0_s1_agent_rp_ready;                                                                 // router_008:sink_ready -> timer_0_s1_agent:rp_ready
	wire         timer_0_s1_agent_rp_startofpacket;                                                         // timer_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         timer_0_s1_agent_rp_endofpacket;                                                           // timer_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [95:0] router_008_src_data;                                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [9:0] router_008_src_channel;                                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         fir_out_x_s1_agent_rp_valid;                                                               // fir_out_x_s1_agent:rp_valid -> router_009:sink_valid
	wire  [95:0] fir_out_x_s1_agent_rp_data;                                                                // fir_out_x_s1_agent:rp_data -> router_009:sink_data
	wire         fir_out_x_s1_agent_rp_ready;                                                               // router_009:sink_ready -> fir_out_x_s1_agent:rp_ready
	wire         fir_out_x_s1_agent_rp_startofpacket;                                                       // fir_out_x_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         fir_out_x_s1_agent_rp_endofpacket;                                                         // fir_out_x_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [95:0] router_009_src_data;                                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [9:0] router_009_src_channel;                                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         fir_in_x_s1_agent_rp_valid;                                                                // fir_in_x_s1_agent:rp_valid -> router_010:sink_valid
	wire  [95:0] fir_in_x_s1_agent_rp_data;                                                                 // fir_in_x_s1_agent:rp_data -> router_010:sink_data
	wire         fir_in_x_s1_agent_rp_ready;                                                                // router_010:sink_ready -> fir_in_x_s1_agent:rp_ready
	wire         fir_in_x_s1_agent_rp_startofpacket;                                                        // fir_in_x_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         fir_in_x_s1_agent_rp_endofpacket;                                                          // fir_in_x_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [95:0] router_010_src_data;                                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [9:0] router_010_src_channel;                                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         sample_tick_s1_agent_rp_valid;                                                             // sample_tick_s1_agent:rp_valid -> router_011:sink_valid
	wire  [95:0] sample_tick_s1_agent_rp_data;                                                              // sample_tick_s1_agent:rp_data -> router_011:sink_data
	wire         sample_tick_s1_agent_rp_ready;                                                             // router_011:sink_ready -> sample_tick_s1_agent:rp_ready
	wire         sample_tick_s1_agent_rp_startofpacket;                                                     // sample_tick_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         sample_tick_s1_agent_rp_endofpacket;                                                       // sample_tick_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [95:0] router_011_src_data;                                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [9:0] router_011_src_channel;                                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_valid;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_valid
	wire  [68:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_data;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_ready;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_ready
	wire   [9:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_channel;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_channel
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_startofpacket; // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_startofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_endofpacket;   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [95:0] cmd_demux_src0_data;                                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [9:0] cmd_demux_src0_channel;                                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [95:0] cmd_demux_src1_data;                                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [9:0] cmd_demux_src1_channel;                                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [95:0] cmd_demux_src2_data;                                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [9:0] cmd_demux_src2_channel;                                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [95:0] cmd_demux_src3_data;                                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [9:0] cmd_demux_src3_channel;                                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [95:0] cmd_demux_src4_data;                                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [9:0] cmd_demux_src4_channel;                                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [95:0] cmd_demux_src5_data;                                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [9:0] cmd_demux_src5_channel;                                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [95:0] cmd_demux_src6_data;                                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [9:0] cmd_demux_src6_channel;                                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [95:0] cmd_demux_src7_data;                                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [9:0] cmd_demux_src7_channel;                                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [95:0] cmd_demux_src8_data;                                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [9:0] cmd_demux_src8_channel;                                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                                      // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [95:0] cmd_demux_src9_data;                                                                       // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                                      // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [9:0] cmd_demux_src9_channel;                                                                    // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                              // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                                // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                                  // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [95:0] cmd_demux_001_src0_data;                                                                   // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src0_ready;                                                                  // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire   [9:0] cmd_demux_001_src0_channel;                                                                // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                                  // cmd_demux_001:src1_valid -> cmd_mux_003:sink1_valid
	wire  [95:0] cmd_demux_001_src1_data;                                                                   // cmd_demux_001:src1_data -> cmd_mux_003:sink1_data
	wire         cmd_demux_001_src1_ready;                                                                  // cmd_mux_003:sink1_ready -> cmd_demux_001:src1_ready
	wire   [9:0] cmd_demux_001_src1_channel;                                                                // cmd_demux_001:src1_channel -> cmd_mux_003:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [95:0] rsp_demux_src0_data;                                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [9:0] rsp_demux_src0_channel;                                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [95:0] rsp_demux_001_src0_data;                                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [9:0] rsp_demux_001_src0_channel;                                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [95:0] rsp_demux_002_src0_data;                                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [9:0] rsp_demux_002_src0_channel;                                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                                  // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [95:0] rsp_demux_002_src1_data;                                                                   // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_002_src1_ready;                                                                  // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire   [9:0] rsp_demux_002_src1_channel;                                                                // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_002_src1_startofpacket;                                                          // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                                            // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_003_src0_valid;                                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [95:0] rsp_demux_003_src0_data;                                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [9:0] rsp_demux_003_src0_channel;                                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_003_src1_valid;                                                                  // rsp_demux_003:src1_valid -> rsp_mux_001:sink1_valid
	wire  [95:0] rsp_demux_003_src1_data;                                                                   // rsp_demux_003:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_003_src1_ready;                                                                  // rsp_mux_001:sink1_ready -> rsp_demux_003:src1_ready
	wire   [9:0] rsp_demux_003_src1_channel;                                                                // rsp_demux_003:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_003_src1_startofpacket;                                                          // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_003_src1_endofpacket;                                                            // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_004_src0_valid;                                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [95:0] rsp_demux_004_src0_data;                                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [9:0] rsp_demux_004_src0_channel;                                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [95:0] rsp_demux_005_src0_data;                                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [9:0] rsp_demux_005_src0_channel;                                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [95:0] rsp_demux_006_src0_data;                                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [9:0] rsp_demux_006_src0_channel;                                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [95:0] rsp_demux_007_src0_data;                                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [9:0] rsp_demux_007_src0_channel;                                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [95:0] rsp_demux_008_src0_data;                                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [9:0] rsp_demux_008_src0_channel;                                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                                  // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [95:0] rsp_demux_009_src0_data;                                                                   // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                                  // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [9:0] rsp_demux_009_src0_channel;                                                                // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                          // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                            // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         router_002_src_valid;                                                                      // router_002:src_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_valid
	wire  [68:0] router_002_src_data;                                                                       // router_002:src_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_data
	wire         router_002_src_ready;                                                                      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [9:0] router_002_src_channel;                                                                    // router_002:src_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_channel
	wire         router_002_src_startofpacket;                                                              // router_002:src_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_startofpacket
	wire         router_002_src_endofpacket;                                                                // router_002:src_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_endofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_valid;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [95:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_data;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_ready
	wire   [9:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_channel;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_startofpacket; // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_endofpacket;   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_mux_src_valid;                                                                         // cmd_mux:src_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_valid
	wire  [95:0] cmd_mux_src_data;                                                                          // cmd_mux:src_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                                         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [9:0] cmd_mux_src_channel;                                                                       // cmd_mux:src_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                                                 // cmd_mux:src_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                                                   // cmd_mux:src_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_endofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_valid;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_valid
	wire  [68:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_data;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_ready;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_ready
	wire   [9:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_channel;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_channel
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_startofpacket; // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_startofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_endofpacket;   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_endofpacket
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_valid;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [9:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_data;           // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_ready;          // avalon_st_adapter:in_0_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                             // avalon_st_adapter:out_0_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_out_0_data;                                                              // avalon_st_adapter:out_0_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                             // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                             // avalon_st_adapter:out_0_error -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_error
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_001:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                         // avalon_st_adapter_001:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                          // avalon_st_adapter_001:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                         // avalon_st_adapter_001:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                            // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                             // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_002:in_0_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                         // avalon_st_adapter_002:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                          // avalon_st_adapter_002:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                         // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                         // avalon_st_adapter_002:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         onchip_memory_s1_agent_rdata_fifo_src_valid;                                               // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                                // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         onchip_memory_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_003:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                         // avalon_st_adapter_003:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                          // avalon_st_adapter_003:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                         // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                         // avalon_st_adapter_003:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire         led_s1_agent_rdata_fifo_src_valid;                                                         // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] led_s1_agent_rdata_fifo_src_data;                                                          // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         led_s1_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_004:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                         // avalon_st_adapter_004:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                          // avalon_st_adapter_004:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                         // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                         // avalon_st_adapter_004:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire         timer_s1_agent_rdata_fifo_src_valid;                                                       // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_src_data;                                                        // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         timer_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_005:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                         // avalon_st_adapter_005:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                          // avalon_st_adapter_005:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                         // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                         // avalon_st_adapter_005:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire         timer_0_s1_agent_rdata_fifo_src_valid;                                                     // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                      // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         timer_0_s1_agent_rdata_fifo_src_ready;                                                     // avalon_st_adapter_006:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                         // avalon_st_adapter_006:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                          // avalon_st_adapter_006:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                         // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                         // avalon_st_adapter_006:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire         fir_out_x_s1_agent_rdata_fifo_src_valid;                                                   // fir_out_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] fir_out_x_s1_agent_rdata_fifo_src_data;                                                    // fir_out_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         fir_out_x_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_007:in_0_ready -> fir_out_x_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                         // avalon_st_adapter_007:out_0_valid -> fir_out_x_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                          // avalon_st_adapter_007:out_0_data -> fir_out_x_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                         // fir_out_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                         // avalon_st_adapter_007:out_0_error -> fir_out_x_s1_agent:rdata_fifo_sink_error
	wire         fir_in_x_s1_agent_rdata_fifo_src_valid;                                                    // fir_in_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] fir_in_x_s1_agent_rdata_fifo_src_data;                                                     // fir_in_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         fir_in_x_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_008:in_0_ready -> fir_in_x_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                         // avalon_st_adapter_008:out_0_valid -> fir_in_x_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                          // avalon_st_adapter_008:out_0_data -> fir_in_x_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                         // fir_in_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                         // avalon_st_adapter_008:out_0_error -> fir_in_x_s1_agent:rdata_fifo_sink_error
	wire         sample_tick_s1_agent_rdata_fifo_src_valid;                                                 // sample_tick_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] sample_tick_s1_agent_rdata_fifo_src_data;                                                  // sample_tick_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         sample_tick_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_009:in_0_ready -> sample_tick_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                         // avalon_st_adapter_009:out_0_valid -> sample_tick_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                          // avalon_st_adapter_009:out_0_data -> sample_tick_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                         // sample_tick_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                         // avalon_st_adapter_009:out_0_error -> sample_tick_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_data_master_translator (
		.clk                    (clk_clk_clk),                                                        //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_readdatavalid       (),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (clk_clk_clk),                                                               //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator (
		.clk                    (clk_clk_clk),                                                                  //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                        //                    reset.reset
		.uav_address            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_read),          //                         .read
		.uav_write              (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (accelerometer_spi_avalon_accelerometer_spi_mode_slave_write),                  //                         .write
		.av_read                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_read),                   //                         .read
		.av_readdata            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_readdata),               //                         .readdata
		.av_writedata           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_writedata),              //                         .writedata
		.av_byteenable          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                                             //              (terminated)
		.av_burstcount          (),                                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                                         //              (terminated)
		.av_writebyteenable     (),                                                                             //              (terminated)
		.av_lock                (),                                                                             //              (terminated)
		.av_chipselect          (),                                                                             //              (terminated)
		.av_clken               (),                                                                             //              (terminated)
		.uav_clken              (1'b0),                                                                         //              (terminated)
		.av_debugaccess         (),                                                                             //              (terminated)
		.av_outputenable        (),                                                                             //              (terminated)
		.uav_response           (),                                                                             //              (terminated)
		.av_response            (2'b00),                                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_clk_clk),                                        //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (clk_clk_clk),                                //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_clk_clk),                             //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                  //                         .write
		.av_readdata            (onchip_memory_s1_readdata),               //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),              //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),             //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),             //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                  //                         .clken
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                  //                         .read
		.uav_write              (led_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (led_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                          //                         .write
		.av_readdata            (led_s1_readdata),                       //                         .readdata
		.av_writedata           (led_s1_writedata),                      //                         .writedata
		.av_chipselect          (led_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                        //                         .write
		.av_readdata            (timer_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),              //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (timer_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                      //                         .write
		.av_readdata            (timer_0_s1_readdata),                   //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                  //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fir_out_x_s1_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fir_out_x_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (fir_out_x_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (fir_out_x_s1_agent_m0_read),            //                         .read
		.uav_write              (fir_out_x_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (fir_out_x_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (fir_out_x_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (fir_out_x_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (fir_out_x_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (fir_out_x_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (fir_out_x_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (fir_out_x_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (fir_out_x_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (fir_out_x_s1_readdata),                 //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fir_in_x_s1_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fir_in_x_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (fir_in_x_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (fir_in_x_s1_agent_m0_read),             //                         .read
		.uav_write              (fir_in_x_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (fir_in_x_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (fir_in_x_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (fir_in_x_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (fir_in_x_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (fir_in_x_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (fir_in_x_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (fir_in_x_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (fir_in_x_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (fir_in_x_s1_write),                     //                         .write
		.av_readdata            (fir_in_x_s1_readdata),                  //                         .readdata
		.av_writedata           (fir_in_x_s1_writedata),                 //                         .writedata
		.av_chipselect          (fir_in_x_s1_chipselect),                //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sample_tick_s1_translator (
		.clk                    (clk_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sample_tick_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sample_tick_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sample_tick_s1_agent_m0_read),          //                         .read
		.uav_write              (sample_tick_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (sample_tick_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sample_tick_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sample_tick_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sample_tick_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sample_tick_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sample_tick_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sample_tick_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sample_tick_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (sample_tick_s1_write),                  //                         .write
		.av_readdata            (sample_tick_s1_readdata),               //                         .readdata
		.av_writedata           (sample_tick_s1_writedata),              //                         .writedata
		.av_chipselect          (sample_tick_s1_chipselect),             //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (90),
		.PKT_CACHE_L               (87),
		.PKT_THREAD_ID_H           (83),
		.PKT_THREAD_ID_L           (83),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (clk_clk_clk),                                                        //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                  //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                   //          .data
		.rp_channel            (rsp_mux_src_channel),                                                //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                  //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (90),
		.PKT_CACHE_L               (87),
		.PKT_THREAD_ID_H           (83),
		.PKT_THREAD_ID_L           (83),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (clk_clk_clk),                                                               //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (68),
		.PKT_ORI_BURST_SIZE_L      (66),
		.PKT_RESPONSE_STATUS_H     (65),
		.PKT_RESPONSE_STATUS_L     (64),
		.PKT_BURST_SIZE_H          (41),
		.PKT_BURST_SIZE_L          (39),
		.PKT_TRANS_LOCK            (31),
		.PKT_BEGIN_BURST           (46),
		.PKT_PROTECTION_H          (59),
		.PKT_PROTECTION_L          (57),
		.PKT_BURSTWRAP_H           (38),
		.PKT_BURSTWRAP_L           (36),
		.PKT_BYTE_CNT_H            (35),
		.PKT_BYTE_CNT_L            (33),
		.PKT_ADDR_H                (26),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (27),
		.PKT_TRANS_POSTED          (28),
		.PKT_TRANS_WRITE           (29),
		.PKT_TRANS_READ            (30),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (51),
		.PKT_SRC_ID_L              (48),
		.PKT_DEST_ID_H             (55),
		.PKT_DEST_ID_L             (52),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (69),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent (
		.clk                     (clk_clk_clk),                                                                               //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                                                     //       clk_reset.reset
		.m0_address              (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                             //                .error
		.rdata_fifo_src_ready    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (70),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_data           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_data),             //        in.data
		.in_valid          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (clk_clk_clk),                                          //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                          //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_clk_clk),                                       //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_003_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                           //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                       //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_clk_clk),                             //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (led_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (led_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                 //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),       //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                             //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_clk_clk),                               //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                   //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),         //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                               //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                     //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fir_out_x_s1_agent (
		.clk                     (clk_clk_clk),                                   //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (fir_out_x_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fir_out_x_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fir_out_x_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fir_out_x_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fir_out_x_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (fir_out_x_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fir_out_x_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fir_out_x_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (fir_out_x_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fir_out_x_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (fir_out_x_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (fir_out_x_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fir_out_x_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (fir_out_x_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (fir_out_x_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (fir_out_x_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                       //                .channel
		.rf_sink_ready           (fir_out_x_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fir_out_x_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fir_out_x_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fir_out_x_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fir_out_x_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fir_out_x_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fir_out_x_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fir_out_x_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fir_out_x_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fir_out_x_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (fir_out_x_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fir_out_x_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fir_out_x_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fir_out_x_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (fir_out_x_s1_agent_rf_source_data),             //        in.data
		.in_valid          (fir_out_x_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (fir_out_x_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fir_out_x_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fir_out_x_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fir_out_x_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fir_out_x_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fir_out_x_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fir_out_x_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fir_out_x_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fir_in_x_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fir_in_x_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fir_in_x_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fir_in_x_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fir_in_x_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fir_in_x_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (fir_in_x_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fir_in_x_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fir_in_x_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (fir_in_x_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fir_in_x_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (fir_in_x_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (fir_in_x_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fir_in_x_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (fir_in_x_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (fir_in_x_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (fir_in_x_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_008_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                      //                .channel
		.rf_sink_ready           (fir_in_x_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fir_in_x_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fir_in_x_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fir_in_x_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fir_in_x_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fir_in_x_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fir_in_x_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fir_in_x_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fir_in_x_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fir_in_x_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),            //                .error
		.rdata_fifo_src_ready    (fir_in_x_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fir_in_x_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fir_in_x_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fir_in_x_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fir_in_x_s1_agent_rf_source_data),             //        in.data
		.in_valid          (fir_in_x_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (fir_in_x_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fir_in_x_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fir_in_x_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fir_in_x_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fir_in_x_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fir_in_x_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fir_in_x_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fir_in_x_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sample_tick_s1_agent (
		.clk                     (clk_clk_clk),                                     //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (sample_tick_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sample_tick_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sample_tick_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sample_tick_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sample_tick_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sample_tick_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sample_tick_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sample_tick_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sample_tick_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sample_tick_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sample_tick_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sample_tick_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sample_tick_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sample_tick_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sample_tick_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sample_tick_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (sample_tick_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sample_tick_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sample_tick_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sample_tick_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sample_tick_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sample_tick_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sample_tick_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sample_tick_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sample_tick_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sample_tick_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (sample_tick_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sample_tick_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sample_tick_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sample_tick_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                     //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (sample_tick_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sample_tick_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sample_tick_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sample_tick_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sample_tick_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sample_tick_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sample_tick_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sample_tick_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sample_tick_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sample_tick_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	nios_accelerometer_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                            //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                   //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_valid),         //          .valid
		.sink_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_data),          //          .data
		.sink_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                                  //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                         //       src.ready
		.src_valid          (router_002_src_valid),                                                         //          .valid
		.src_data           (router_002_src_data),                                                          //          .data
		.src_channel        (router_002_src_channel),                                                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                    //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                       //       src.ready
		.src_valid          (router_004_src_valid),                       //          .valid
		.src_data           (router_004_src_data),                        //          .data
		.src_channel        (router_004_src_channel),                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                  //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_005_src_ready),                    //       src.ready
		.src_valid          (router_005_src_valid),                    //          .valid
		.src_data           (router_005_src_data),                     //          .data
		.src_channel        (router_005_src_channel),                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)               //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (led_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                 //          .valid
		.sink_data          (led_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                  //       src.ready
		.src_valid          (router_006_src_valid),                  //          .valid
		.src_data           (router_006_src_data),                   //          .data
		.src_channel        (router_006_src_channel),                //          .channel
		.src_startofpacket  (router_006_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (timer_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),               //          .valid
		.sink_data          (timer_s1_agent_rp_data),                //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                  //       src.ready
		.src_valid          (router_007_src_valid),                  //          .valid
		.src_data           (router_007_src_data),                   //          .data
		.src_channel        (router_007_src_channel),                //          .channel
		.src_startofpacket  (router_007_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (timer_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                  //       src.ready
		.src_valid          (router_008_src_valid),                  //          .valid
		.src_data           (router_008_src_data),                   //          .data
		.src_channel        (router_008_src_channel),                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (fir_out_x_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (fir_out_x_s1_agent_rp_valid),           //          .valid
		.sink_data          (fir_out_x_s1_agent_rp_data),            //          .data
		.sink_startofpacket (fir_out_x_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (fir_out_x_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                  //       src.ready
		.src_valid          (router_009_src_valid),                  //          .valid
		.src_data           (router_009_src_data),                   //          .data
		.src_channel        (router_009_src_channel),                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (fir_in_x_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (fir_in_x_s1_agent_rp_valid),            //          .valid
		.sink_data          (fir_in_x_s1_agent_rp_data),             //          .data
		.sink_startofpacket (fir_in_x_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (fir_in_x_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                  //       src.ready
		.src_valid          (router_010_src_valid),                  //          .valid
		.src_data           (router_010_src_data),                   //          .data
		.src_channel        (router_010_src_channel),                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (sample_tick_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (sample_tick_s1_agent_rp_valid),         //          .valid
		.sink_data          (sample_tick_s1_agent_rp_data),          //          .data
		.sink_startofpacket (sample_tick_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sample_tick_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                  //       src.ready
		.src_valid          (router_011_src_valid),                  //          .valid
		.src_data           (router_011_src_data),                   //          .data
		.src_channel        (router_011_src_channel),                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)             //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (26),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (46),
		.PKT_BYTE_CNT_H            (35),
		.PKT_BYTE_CNT_L            (33),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (41),
		.PKT_BURST_SIZE_L          (39),
		.PKT_BURST_TYPE_H          (43),
		.PKT_BURST_TYPE_L          (42),
		.PKT_BURSTWRAP_H           (38),
		.PKT_BURSTWRAP_L           (36),
		.PKT_TRANS_COMPRESSED_READ (27),
		.PKT_TRANS_WRITE           (29),
		.PKT_TRANS_READ            (30),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (69),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (33),
		.OUT_BURSTWRAP_H           (38),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter (
		.clk                   (clk_clk_clk),                                                                               //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                                     // cr0_reset.reset
		.sink0_valid           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_ready)          //          .ready
	);

	nios_accelerometer_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                      //      sink.ready
		.sink_channel       (router_src_channel),                    //          .channel
		.sink_data          (router_src_data),                       //          .data
		.sink_startofpacket (router_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_src0_data),                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),            //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                  //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                  //          .valid
		.src1_data          (cmd_demux_src1_data),                   //          .data
		.src1_channel       (cmd_demux_src1_channel),                //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),            //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                  //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                  //          .valid
		.src2_data          (cmd_demux_src2_data),                   //          .data
		.src2_channel       (cmd_demux_src2_channel),                //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),            //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                  //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                  //          .valid
		.src3_data          (cmd_demux_src3_data),                   //          .data
		.src3_channel       (cmd_demux_src3_channel),                //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                  //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                  //          .valid
		.src4_data          (cmd_demux_src4_data),                   //          .data
		.src4_channel       (cmd_demux_src4_channel),                //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),          //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),            //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                  //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                  //          .valid
		.src5_data          (cmd_demux_src5_data),                   //          .data
		.src5_channel       (cmd_demux_src5_channel),                //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),            //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                  //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                  //          .valid
		.src6_data          (cmd_demux_src6_data),                   //          .data
		.src6_channel       (cmd_demux_src6_channel),                //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),          //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),            //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                  //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                  //          .valid
		.src7_data          (cmd_demux_src7_data),                   //          .data
		.src7_channel       (cmd_demux_src7_channel),                //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),          //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),            //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                  //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                  //          .valid
		.src8_data          (cmd_demux_src8_data),                   //          .data
		.src8_channel       (cmd_demux_src8_channel),                //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),          //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),            //          .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                  //      src9.ready
		.src9_valid         (cmd_demux_src9_valid),                  //          .valid
		.src9_data          (cmd_demux_src9_data),                   //          .data
		.src9_channel       (cmd_demux_src9_channel),                //          .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),          //          .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //      sink.ready
		.sink_channel       (router_001_src_channel),                //          .channel
		.sink_data          (router_001_src_data),                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_001_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),              //          .valid
		.src0_data          (cmd_demux_001_src0_data),               //          .data
		.src0_channel       (cmd_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),        //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),              //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),              //          .valid
		.src1_data          (cmd_demux_001_src1_data),               //          .data
		.src1_channel       (cmd_demux_001_src1_channel),            //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //          .channel
		.sink0_data          (cmd_demux_src1_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                 //          .valid
		.src_data            (cmd_mux_004_src_data),                  //          .data
		.src_channel         (cmd_mux_004_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                //          .channel
		.sink0_data          (cmd_demux_src4_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                //          .channel
		.sink0_data          (cmd_demux_src5_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                 //          .valid
		.src_data            (cmd_mux_006_src_data),                  //          .data
		.src_channel         (cmd_mux_006_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                //          .channel
		.sink0_data          (cmd_demux_src6_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                 //          .valid
		.src_data            (cmd_mux_007_src_data),                  //          .data
		.src_channel         (cmd_mux_007_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                //          .channel
		.sink0_data          (cmd_demux_src7_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //          .valid
		.src_data            (cmd_mux_008_src_data),                  //          .data
		.src_channel         (cmd_mux_008_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                //          .channel
		.sink0_data          (cmd_demux_src8_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                 //          .valid
		.src_data            (cmd_mux_009_src_data),                  //          .data
		.src_channel         (cmd_mux_009_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                //          .channel
		.sink0_data          (cmd_demux_src9_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)             //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                                                                               //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.sink_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                                 //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //      sink.ready
		.sink_channel       (router_003_src_channel),                //          .channel
		.sink_data          (router_003_src_data),                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_003_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),              //          .valid
		.src0_data          (rsp_demux_001_src0_data),               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),              //          .valid
		.src1_data          (rsp_demux_002_src1_data),               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_cmd_demux_001 rsp_demux_003 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //      sink.ready
		.sink_channel       (router_005_src_channel),                //          .channel
		.sink_data          (router_005_src_data),                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_005_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.src1_data          (rsp_demux_003_src1_data),               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                  //      sink.ready
		.sink_channel       (router_006_src_channel),                //          .channel
		.sink_data          (router_006_src_data),                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_006_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),              //          .valid
		.src0_data          (rsp_demux_004_src0_data),               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                  //      sink.ready
		.sink_channel       (router_007_src_channel),                //          .channel
		.sink_data          (router_007_src_data),                   //          .data
		.sink_startofpacket (router_007_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_007_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),              //          .valid
		.src0_data          (rsp_demux_005_src0_data),               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                  //      sink.ready
		.sink_channel       (router_008_src_channel),                //          .channel
		.sink_data          (router_008_src_data),                   //          .data
		.sink_startofpacket (router_008_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_008_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),              //          .valid
		.src0_data          (rsp_demux_006_src0_data),               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                  //      sink.ready
		.sink_channel       (router_009_src_channel),                //          .channel
		.sink_data          (router_009_src_data),                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_009_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),              //          .valid
		.src0_data          (rsp_demux_007_src0_data),               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                  //      sink.ready
		.sink_channel       (router_010_src_channel),                //          .channel
		.sink_data          (router_010_src_data),                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_010_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //          .valid
		.src0_data          (rsp_demux_008_src0_data),               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                  //      sink.ready
		.sink_channel       (router_011_src_channel),                //          .channel
		.sink_data          (router_011_src_data),                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_011_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),              //          .valid
		.src0_data          (rsp_demux_009_src0_data),               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                     //          .valid
		.src_data            (rsp_mux_src_data),                      //          .data
		.src_channel         (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                //          .channel
		.sink0_data          (rsp_demux_src0_data),                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),              //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),            //          .channel
		.sink3_data          (rsp_demux_003_src0_data),               //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),              //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),              //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),            //          .channel
		.sink4_data          (rsp_demux_004_src0_data),               //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),        //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),              //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),              //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),            //          .channel
		.sink5_data          (rsp_demux_005_src0_data),               //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),              //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),              //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),            //          .channel
		.sink6_data          (rsp_demux_006_src0_data),               //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),              //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),              //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),            //          .channel
		.sink7_data          (rsp_demux_007_src0_data),               //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),              //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),              //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),            //          .channel
		.sink8_data          (rsp_demux_008_src0_data),               //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),        //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),              //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),              //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),            //          .channel
		.sink9_data          (rsp_demux_009_src0_data),               //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)         //          .endofpacket
	);

	nios_accelerometer_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_002_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (rsp_demux_003_src1_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.sink1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.sink1_data          (rsp_demux_003_src1_data),               //          .data
		.sink1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src1_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (26),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (35),
		.IN_PKT_BYTE_CNT_L             (33),
		.IN_PKT_TRANS_COMPRESSED_READ  (27),
		.IN_PKT_TRANS_WRITE            (29),
		.IN_PKT_BURSTWRAP_H            (38),
		.IN_PKT_BURSTWRAP_L            (36),
		.IN_PKT_BURST_SIZE_H           (41),
		.IN_PKT_BURST_SIZE_L           (39),
		.IN_PKT_RESPONSE_STATUS_H      (65),
		.IN_PKT_RESPONSE_STATUS_L      (64),
		.IN_PKT_TRANS_EXCLUSIVE        (32),
		.IN_PKT_BURST_TYPE_H           (43),
		.IN_PKT_BURST_TYPE_L           (42),
		.IN_PKT_ORI_BURST_SIZE_L       (66),
		.IN_PKT_ORI_BURST_SIZE_H       (68),
		.IN_ST_DATA_W                  (69),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (68),
		.OUT_PKT_BURST_SIZE_L          (66),
		.OUT_PKT_RESPONSE_STATUS_H     (92),
		.OUT_PKT_RESPONSE_STATUS_L     (91),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (70),
		.OUT_PKT_BURST_TYPE_L          (69),
		.OUT_PKT_ORI_BURST_SIZE_L      (93),
		.OUT_PKT_ORI_BURST_SIZE_H      (95),
		.OUT_ST_DATA_W                 (96),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                                                               //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                                      //      sink.valid
		.in_channel           (router_002_src_channel),                                                                    //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                                //          .endofpacket
		.in_ready             (router_002_src_ready),                                                                      //          .ready
		.in_data              (router_002_src_data),                                                                       //          .data
		.out_endofpacket      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_TRANS_WRITE            (56),
		.IN_PKT_BURSTWRAP_H            (65),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (68),
		.IN_PKT_BURST_SIZE_L           (66),
		.IN_PKT_RESPONSE_STATUS_H      (92),
		.IN_PKT_RESPONSE_STATUS_L      (91),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (70),
		.IN_PKT_BURST_TYPE_L           (69),
		.IN_PKT_ORI_BURST_SIZE_L       (93),
		.IN_PKT_ORI_BURST_SIZE_H       (95),
		.IN_ST_DATA_W                  (96),
		.OUT_PKT_ADDR_H                (26),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (35),
		.OUT_PKT_BYTE_CNT_L            (33),
		.OUT_PKT_TRANS_COMPRESSED_READ (27),
		.OUT_PKT_BURST_SIZE_H          (41),
		.OUT_PKT_BURST_SIZE_L          (39),
		.OUT_PKT_RESPONSE_STATUS_H     (65),
		.OUT_PKT_RESPONSE_STATUS_L     (64),
		.OUT_PKT_TRANS_EXCLUSIVE       (32),
		.OUT_PKT_BURST_TYPE_H          (43),
		.OUT_PKT_BURST_TYPE_L          (42),
		.OUT_PKT_ORI_BURST_SIZE_L      (66),
		.OUT_PKT_ORI_BURST_SIZE_H      (68),
		.OUT_ST_DATA_W                 (69),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                                                               //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                                         //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                                         //          .ready
		.in_data              (cmd_mux_src_data),                                                                          //          .data
		.out_endofpacket      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                     // (terminated)
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_clk_clk),                                                                      // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),                                            // in_rst_0.reset
		.in_0_data      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                                     //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)            //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)      //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)      //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)      //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (fir_out_x_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fir_out_x_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fir_out_x_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)        //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (fir_in_x_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fir_in_x_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fir_in_x_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),       //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),      //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),      //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)       //         .error
	);

	nios_accelerometer_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (sample_tick_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sample_tick_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sample_tick_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)          //         .error
	);

endmodule
